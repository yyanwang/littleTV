[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Audio File: ../../../Downloads/Bartek Szopka- Everything you never wanted to know about JavaScript numbers -- JSConf EU 2013.mp4
Video File: ../../../Downloads/Bartek Szopka- Everything you never wanted to know about JavaScript numbers -- JSConf EU 2013.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.750000
Scroll Position: 88
Active Line: 113

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,早上好 JSConf\Ngood morning JSConf
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以你们都知道我的名字了\Nso you already know my name
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我从来没看过自己名字显示的这么大\NI've never seen it this big
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,可以帮我照个照片吗？\Ncan someone take a picture of it for me
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我会很感激的。好了\NI'll be grateful okay
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,今天我想跟大家分享一下我对Javascript数字问题的思考\Ntoday I'd like to share with you some of the questions I was asking myself about numbers in JavaScript
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,昨天Brendan Eich（JS的作者）在分享中告诉我们\Nbecause even Brendan Eich yesterday and his keynote
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,Javascript中的数字并不完美\Ntold us that the numbers are not really perfect currently
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以Javascript以后的版本中会引入新的数字类型\Nthat's why all these new types of numbers are being introduced for future versions
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,但今天我想把注意力集中在现有的Javascript中数字的实现\Nbut today I like to focus on what currently we have in JavaScript in terms of numbers
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,因为当你做十进制小数或者大数的运算时\Nbecause if you ever tried to do some computations on decimal fractions or large integers in JavaScript
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,你可能会注意到结果并不精确\Nyou probably noticed that they are not really precise
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,有时候结果甚至出人意料\Nand may lead to some quite unexpected results
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我举几个例子\Nlet me give you some examples of that
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,如果我们计算0.1 + 0.2\Nif we try to add 0.1 to 0.2
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,你可能认为结果是0.3\Nyou would expect it will be equal to 0.3
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,实际上并不是\Nbut it's not
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,不是0.3，而是非常接近0.3的一个数\Nwhat it's actually equal a number very close to 0.3
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,另一方面，如果你拿一个非常大的数\Non the other hand if you take quite a large integer
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,比如这个，在它的基础上加1\Nlike for example this one and you try to add one to it
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,结果还是原来的数字不变\Nyou will get exactly the same number
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,但如果在它基础上加2，结果就对了\Nbut if you add 2 to it you get the result as expected
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,但问题不仅仅是这些计算结果不精确\Nbut it's not only about inaccurate results of some computations
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,Javascript中的数字还有其他怪异的地方\Nthere are many different weird things about the numbers in JavaScript
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,像是有名的NaN\Nlike this infamous NaN value
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,一般你做了非法的数字运算时，Javascript会返回NaN\Nso NaN is a value you will get if you try to turn in to a number something that is not
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以我们来试试这个\Nso let's try something like this
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,但是如果你 typeof NaN\Nbut if you try to check the type of NaN
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,NaN的类型实际上是数字it will tell you it's a number
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以每次我碰上这种问题\Nand every time I stumbled upon something like this happening
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我就会问我自己为什么\NI was asking myself why does it happen
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,因为背后肯定有原因的，对吧？\Nbecause there has to be a reason right?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这种奇怪的行为不会无缘无故的发生，多数情况下\Nthings like that don't happen without the reason at least in most cases
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,当我们有和Javascript相关的问题时\Nand if you're asking yourself a question about JavaScript
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们有一个确定的地方能找到答案\Nthere is one sure place to look for the answer
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,ECMAscript规范\Nthe ECMA script standard
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,但规范里只是说\Nbut all the standard says about the numbers is that
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,Javascript数字使用双精度64位IEEE 754规范的浮点数表示法\Nthey are represented by the double precision 64-bit format IEEE 754 binary floating-point arithmetic
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,事实上还有多一点解释\Nactually yeah it's just a little bit more than that
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,但没有写Javascript中，数字在内存中是如何表示的\Nbut nothing about how the numbers are represented in the memory
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,也没有解释计算是怎样完成的\Nhow the calculations are done
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以我进一步调研，发现Javascript并不是第一个使用IEEE 754规范的\Nso I had to look the further but it turns out that javascript is not the first language that uses this standard
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,有许多其他的语言也使用了这个规范\Nthere are many others
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,如果你用Python，会得到一样的结果\Nif you try for example Python we have exactly the same problems in here
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,更新一些的语言，比如Ruby，也是一样的结果\Nsomething more modern like Ruby nope
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,当然，还有Java\Nand of course Java
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,事实上我还需要写一个类来完成这个计算\Nactually I had to read write a class to add these two numbers in Java
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,事实是\Nanyway it turns out that
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,Javascript中数字的问题就是从Java中来的\Nwe have these kind of numbers in JavaScript because they were in Java at the first place
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,好，所以我问自己这些问题为什么存在\Nright so I was still asking myself why does it happen
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们对数字的表示出了什么问题才会导致不精确的计算结果呢？\Nwhat is wrong with this representation of the numbers that we have such imprecise results
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,第一步我想看到Javascript数字是如何用二进制来表示的\Nand the first step I wanted to make was to see how a given number looks like in this binary representation
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我想看到64位表示法中的每一位\NI wanted to see every single bit of this 64 bit representation
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,不幸的是，我们无法简单获取到内存中的二进制位\Nunfortunately in JavaScript we don't really have easy direct access to bits in memory
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,借助于我朋友**的帮忙but with a little help from my friends typed our eyes
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我自己写了个方法\NI was able to create myself a little utility function
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以我们可以把任何数字，比如0.3\Nso now we can turn any number let's say our 0.3
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,用二进制的来表示\Nand see how it looks in its binary representation
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这就是0.3用64位双精度浮点数的二进制表示法\Nso these are all 64 bits of binary representation of number 0.3 in this double precision floating point
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们来比较下它和0.1加0.2的结果\Nso let's compare it to result of the computation of 0.1 plus 0.2
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,几乎是一样的，但仔细看右边后三位\Nit's almost the same but if you look at the last three bits on the right side
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,你会看到差异\Nyou will see that there is a little difference there
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们可以拿任意一个数\Nand yeah we can take any number we want like I don't know
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,比如20130109，看看是如何表示的\N2013 0 9 and see how it looks like
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,但只看这些0和1，我们无法理解\Nbut looking at these 0s and 1s doesn't really give us any kind of understanding
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,发生了什么，数字是怎么计算的\Nwhat is going on there how these numbers are computed
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,幸运的是，由于这个规范被很多语言采用\Nfortunately because this standard is used in many languages
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,网上有很多资源让我们了解这个规范\Nthere are quite a few resources online that tell us how does the standard work
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这里我收集了一些\NI gathered a couple of these here
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,但不幸的是，这里充满了疯狂的公式和二进制数的运算\Nbut unfortunately they are full of crazy equations and operations on binary numbers
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我花了很多个夜晚，看了大量论文才真正理解了它是如何工作的\Nand it took me quite a few long evenings a lot of paper to get my head around how it really works
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以今天我帮你们省下一些麻烦\Nso here I am to save you the trouble
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,希望你们听完之后能理解这一页wik\Niand hopefully after this talk you will actually be able to understand this Wikipedia page
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们来看看计数法是如何工作的\Nso let's see how this representation works
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,像我前面提到的那样，我们用64位来表示数字\Nso as I already mentioned a couple of times we have 64 bits to represent our number
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这64位可以分成三部分来看\Nand they can be divided into three parts
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,第一部分是1位符号位，在这里\Nthere is one bit for a sign - is this guy in here
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,表示数字是正数还是负数\Nit tells us if the number is positive or negative
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,右侧的52位，实际上是53位，有一位是隐藏的\Nthere is this big chunk on the right 52 bits actually it's 53 because one of them is hidden
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我后面会讲到这儿\NI will talk about this guy later
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这一部分叫做有效数字，如果你说美式英语，你可能会叫它mantissa\Nthis part is called significant if you are American English user you probably call it mantissa
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,有时候也被叫做小数部分\Nsometimes it's referred as fraction
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,基本上这52位表示数字的值\Nbut basically this 52 bits are representing the binary digits of our number
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,一部分用来表示数字的整数部分\Nand some of them are used to represent the integer part of our number
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,另外一部分是小数部分\Nand the others are for the fraction
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这里我用一个圆点将它们分隔开来\Nand I use this point in here to show where this split happens
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,圆点左边表示整数部分\Nso this bits on the left of this point are used to represent the integer part
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,圆点右边表示小数部分\Nand the rest is for the fraction
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,余下的11位是底数。 底数相当于一个乘数\Nand the remaining 11 bits is the exponent and the exponent is kind of a multiplier
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,用来和有效数字相乘，最终结果就是我们的数值\Nthat is used to scale the value given by the significant to give us the final value of our number
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我知道这很难理解，所以让我来举个例子\Nand I'm pretty sure it's quite confusing at this point so let me give you a little bit of analogy
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我想你肯定见过数字写成这样的形式\NI hope that you've at least at some point of your life seen a number written like this
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这叫做科学计数法\Nit's so called exponential or scientific notation
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这种计数法里面我们把一个数字分为两部分\Nso in this notation we also have a number divided into two parts
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,一部分是有效数字\Nthis is there is this part it represents the significant digits of our numbers
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,数字中所有的数位，也叫做有效数字so all the digits we want to have in our number and it's also called significant
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们将这个数字乘以10的n次方，最终结果就是我们的数字\Nand we compute number by multiplying it times 10 to the power of the exponent
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以说底数相当于一个伸展的因子\Nso the exponent is kind of a scaling factor
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,底数越大我们的数值就越大\Nso the bigger the exponent gets the bigger our number will be
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,底数越小，我们的数值也越小\Nand the smaller the exponent gets the smaller value of our number will have
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,底数的大小影响圆点的位置\Nand we can look at this exponent as kind of defining the position of the point in our representation
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,因为底数变大时圆点向右移\Nbecause when the exponent gets higher the point kind of moves to the right
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,数字也就越大\Nand makes this number bigger
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,底数变小，圆点向左移\Nand when the exponent gets smaller it kind of moves the point to the left
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,数字也就越小\Nmaking the numbers smaller and smaller
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,二进制表示法中的有效数字和指数部分和科学计数法中相同的\Nand actually the roles of significant and exponent in this binary notation for the floating point numbers are exactly the same
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以我们倒回去仔细研究一下它是如何工作的\Nso let's get back to it and see how it works and more details
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,符号位就不用多说了\Nso the sign bit there is not much to say about this guy
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,i如果符号位是0，说明是正数\Nf its value is zero the number is positive
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,因为计算的是-1的0次方\Nbecause it's counted as the power of minus one
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,如果符号位置为1\Nand if we turn it to one
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,就变成负数了，很简单\Nour number becomes negative simple as that
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,指数部分比较有意思\Nexponent is a little bit more interesting
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们有11位来表示指数部分\Nso we have eleven bits to represent the exponent
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and the exponent that is an integer value so we can represent the number from 0 to 2047
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,but we would actually want exponent to have negative and positive values
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so what is actually used in so called offset binary notation
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so we take the number computed from the powers of two
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,of the from the bits of exponent this one and we subtract 1023 from it
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,it's exactly the health of the range so when our value computed from the exponent
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,bits gets exactly to this point of 1022 three our exponent will be zero
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and when it gets lower, the exponent will be negative
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,when it's higher the exponent will be positive
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and this number, the value for the exponent
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,is actually defining the position of this point in the significant
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so it defines how many bits we have for the integer part of the number
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and how many are left for the fraction part
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so the bigger our exponent gets the more bits we have for the integer part
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and the bigger our integer value gets the smaller exponent is
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,the point will move to the left making/giving us less bits for the integer part
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and actually that's why it's called the floating point
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,because the position of the point is depends on the value of the exponent
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so now let's have a look at the most important part
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,the significant
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,as I told you already we have 52 bits
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,these are these red ones
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and here this first guy is this hidden
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we can save him here yeah and we can stick him
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,because we don't actually control its value
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,its value is always assumed to be one
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so that's why we don't have to put them into 64 bits
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,because we can't change it to 0
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so to explain you how this significant works let's start with something simple like number 1
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so for number one our exponent is zero
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so it puts our point in here so we have one bit on the left hand side
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,this one bit representing our integer part
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and it represents two to the power of zero
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so it's 1 but we have only one bit for the integer we can't represent any bigger number
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so if we try to represent the number 2
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we have to move the point to the right by changing the exponent
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so now we have two bits for the integer part
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,this first bit is representing 2 to the power of 1 at this point
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so it gives us 2
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and the other one is representing 2 to the power of 0
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so we can represent also number 3 but again we just used our 2 bits in the integer part
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so to represent number 4 we have to again move the point to the right by changing the exponent
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so now we have oops sorry yeah I was at for ideas
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so now we have three bits for the integer part
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,the first one represents two to the power of two
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,the last one represents two to the power of zero
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so the bigger number we want to represent in terms of the integer value the more bits we will need
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,for the integer part now let's see how the fraction part works
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,the first bit after the point represents 2 to the power of minus one
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so it gives us 1/2 to the power of one so it gives us a half
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so by changing this first bit after the point we can represent 0.5 fraction
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,the next one is representing 2 to the power of minus 2
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so it gives us a quarter next one is 2 to the power of minus 3 it's 1/8 and so onand so on
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,every single bit and the fraction part represents smaller and smaller fraction based on the inverse power of 2
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so what it tells us is that
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we can only build the fraction of our number by adding up these inverted powers of 2
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and unfortunately not all of decimal fractions can be represented this way
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so if we take our 0.1 example
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we can see that to form 0.1 we are adding smaller and smaller powers of two
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,but actually they will never add up to exactly 0.1 value
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so this value is already stored in this representation with a little bit of error
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and these errors add up when we do some computations on these numbers
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and at some point they they show up
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so the limit of this representation in terms of accuracy of the fractions is based on two factors
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,first factor is that we are building our fraction from the inverse power of two
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and the other factor is that we actually have quite limited 52 bits of significant
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we can't represent the smaller values
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,what is even more important is that
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,the bigger number we get in terms of the integer value
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so when we need more and more bits for the integer part
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,the less bits we have left for the fraction part
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so when we move the point right to the end of this representation
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,let's see to this point for such a large integer value
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we have only one bit left for the fraction part so we can only represent the house
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we can't represent any other fraction for such a large numbers
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so what happens if we move the point even more to the right
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,if the exponent is equal to 52
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we have all the bits of the significant used for the integer value
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,there is no bit left for the fraction part
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so from this point we can only represent integers value
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so the biggest integer value that actually fits into this significant
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,is this one we've used all the bits in the significant part to represent this number
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,now what would happen if we try to represent the bigger number
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,let's see let's change that
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,what happens is kind of what we expected
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we moved the point to the right
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,to make a more space for the integer part
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so we have right now 53 bits for the integer part but actually there is no bit left there
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so how the number is computed
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so what happens is
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,that it's assumed that all these bits that are missing are zeros
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so this number is actually accurately represented
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,because this last bit is assumed to be zero
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,but what would happen if we try to add 1 to it
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,again we can't because we can't change the value of this last bit
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,because we don't control it it's it's always zero
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so the last bit we actually control is this one
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and it represents two to the power of one so we can only add 2 to this number
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so from this point when the exponent is equal to 53
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we can only represent every second integer until we get to this point
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and again to represent the bigger number we again have to add 2 to it
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we will move point to the right
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so right now we have 2 bits that are assumed to be 0
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so the last value the last bit of our control is representing 2 to the power of 2
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so it's 4
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so we can represent only every 4th integer for exponent equal to 54
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so the bigger the exponent gets the bigger gaps we will have between the integers values
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we can represent so actually starting from this exponent 52
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we already have gaps between the numbers
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so actually any operations on on such a large integers will have some error
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and similar thing happens on the other side of the significant
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,if we make it smaller when we have the exponent value of -1
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so our point is right before the hidden bit
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,this hidden bit represents 1/2
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and every other bit in the significant represents smaller and smaller powers of 2
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and when we move the point to left
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we are getting some missing bits assumes to be zeros
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,our first bit insignificant represents smaller and smaller power of 2
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so we are getting closer and closer to 0
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,but when we have this bit the hidden bit assumed to be 1
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,it always represents some power of 2
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,it can be very small but there will be always some value in here
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,all right so we will never be able to represent number 0
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,because we'll always have some value given by this bit
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,fortunately this representation has a section for death
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so when our exponent gets his lowest possible value
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so when the all bits of the exponent are 0
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so our exponent is minus 1023 the hidden bits also turns to 0
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so this way we can represent zero as all the bits being 0
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and we can of course change some bits and significant to represent numbers very close to 0
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,they are called sub normal values because of this hidden bit being 0
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,but you may remember this sign guy in here
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and I told you that we can use it to change the sign of any number represented in this representation
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so what would happen if we change the sign of 0
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,yeah we will get minus 0
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,actually the floating point representation defines two 0s
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,positive and negative one in JavaScript
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,it's not very easy to notice this negative zero
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,because there are only certain operations that return it like dividing by minus infinity
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,but it's there and the difference between negative 0 and positive 0 can be actually detected
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so we've seen what happens when the exponent is
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,again when the exponent is at its lowest value
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so now let's see the other side of the extreme
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,when we have all the bits of the exponent set to 1 for the highest exponent value
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,this is the value reserved for the Infinity positive or negative infinity
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so that's how the Infinity looks like
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,all the exponent bits set to 1 and all the significant bits set to 0
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and what will happen if we try to change this significant bits to Banke we get to now
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and it's not because there is some error actually
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,floating point representation defines NaN value
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so if all the exponent bits are set to 1 and any bit in the significant is set to 1 it's not a number value
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so it kind of explains why NaN type is a number
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,because NaN is a value defined by the floating point representation
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,it's defined by 64 bits like any other number actually
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,this we have 52 bits in significance so there are quite many NaN values defined in this representation
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,fortunately to us JavaScript simplifies it to only one NaN
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,yeah but let's get maybe back to numbers and summarize it what we already heard here
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so for any given number we can compute its value
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,by computing the values of the significant bits with the position of the point based on the value from the exponent
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and design defining a design of our number
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,but as I told you at the very beginning we can treat the exponent as kind of a multiplier
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so if we take it out of this parenthesis and treat it as a multiplier
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,we start to compute the significant value always starting with 2 to the power of 0
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,it's the value given by this hidden bit
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so we can always set it to 1 because you know 2 to the power of 0 is 1
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so that's the one given by the hidden bit
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and here we have the value computed for the exponent
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and this way we kind of reverse engineered the equation for how the numbers are computed in double floating-point representation
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and that's the equation you can find in similar fashion on this Wikipedia page
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so I know it was quite a hardcore topic for a Sunday morning after the great party
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,but I hope that I have given you at least a little bit of understanding how numbers in JavaScript work
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and why we have all these problems we've done
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and hopefully after this talk we can all think about ourselves as those who understand binary
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and maybe next time you stumble upon some weird behavior with numbers with JavaScript
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and you will ask yourself why
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,because answers and reasons are out there waiting for us to find them
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so be curious because there is hell a lot of interesting things you can learn
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and sometimes quite unexpected answers you can get
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,so that was all I had for you
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,you can follow me on Twitter
