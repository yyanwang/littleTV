[Script Info]
; Script generated by Arctime Pro 2.4
; http://arctime.cn/
Title: Default ASS file
ScriptType: v4.00+
WrapStyle: 2
Collisions: Normal
PlayResX: 1280
PlayResY: 720
ScaledBorderAndShadow: yes
Video Zoom Percent: 1
; ----------------------
; ArctimeTrackCount: 3
; ArctimeEncodeMethod: C
; 使用方法 C

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100.0,100.0,0.0,0.0,1,2.0,2.0,2,10,10,10,1
Style: Default-L2,Hiragino Sans GB,32,&H00FFFFFF,&H00FFFFFF,&H19533B3B,&H910E0807,0,0,0,0,100.0,100.0,0.0,0.0,1,2.5,0.0,2,135,135,35,1
Style: Default-Box,Hiragino Sans GB,54,&H00FFFFFF,&H00FFFFFF,&H41000000,&HFF000000,0,0,0,0,100.0,100.0,0.0,0.0,3,8.5,0.0,2,135,135,72,1
Style: Pingfang-1280x720,PingFang SC,48,&H00FFFFFF,&H00FFFFFF,&H19533B3B,&H910E0807,0,0,0,0,100.0,100.0,0.0,0.0,1,3.1,1.2,2,135,135,72,1
Style: Pingfang-1920x1080,PingFang SC,60,&H00FFFFFF,&H00FFFFFF,&H19533B3B,&H910E0807,0,0,0,0,100.0,100.0,0.0,0.0,1,4.2,1.5,2,200,200,102,1
Style: OneFX,PingFang SC,54,&H00FFFE67,&H000000FF,&H00A4671B,&H914F310D,-1,-1,-1,0,100.0,120.0,0.0,10.32258,1,5.6910567,4.268293,2,10,10,80,1
Style: 720CN,Arial Unicode MS,50,&H00FFFFFF,&H000000FF,&H00DB1150,&H00000000,0,0,0,0,100.0,100.0,0.0,0.0,1,2.0,2.0,2,10,10,10,134
Style: 720EN,Arial Hebrew,36,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100.0,100.0,0.0,0.0,1,2.0,2.0,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 2,0:00:03.13,0:00:31.30,720EN,,0,0,0,,{\fad(120,120)}Hi, everybody.
Dialogue: 2,0:00:03.13,0:00:31.31,720CN,,0,0,0,,{\fad(120,120)}大家好
Dialogue: 2,0:00:31.30,0:00:32.31,720EN,,0,0,0,,{\fad(120,120)}How we doing?
Dialogue: 2,0:00:31.31,0:00:32.31,720CN,,0,0,0,,{\fad(120,120)}怎么样
Dialogue: 2,0:00:32.31,0:00:34.14,720EN,,0,0,0,,{\fad(120,120)}We got caffeinated?
Dialogue: 2,0:00:32.31,0:00:34.14,720CN,,0,0,0,,{\fad(120,120)}我们补充了咖啡因吗？
Dialogue: 2,0:00:34.14,0:00:35.36,720EN,,0,0,0,,{\fad(120,120)}Feeling good?
Dialogue: 2,0:00:34.14,0:00:35.37,720CN,,0,0,0,,{\fad(120,120)}感觉好吗？
Dialogue: 2,0:00:35.36,0:00:36.36,720EN,,0,0,0,,{\fad(120,120)}Nice.
Dialogue: 2,0:00:35.37,0:00:36.37,720CN,,0,0,0,,{\fad(120,120)}真好
Dialogue: 2,0:00:36.36,0:00:39.80,720EN,,0,0,0,,{\fad(120,120)}So I'm Anjana Vakil, hello.
Dialogue: 2,0:00:36.37,0:00:39.80,720CN,,0,0,0,,{\fad(120,120)}我是Anjana Vakil
Dialogue: 2,0:00:39.80,0:00:44.86,720EN,,0,0,0,,{\fad(120,120)}You can find me on Twitter at my name and today I'd like to talk to you about immutable
Dialogue: 2,0:00:39.80,0:00:44.87,720CN,,0,0,0,,{\fad(120,120)}你可以在Twitter上以我的名字找到我，\N今天我想和你谈谈
Dialogue: 2,0:00:44.86,0:00:49.48,720EN,,0,0,0,,{\fad(120,120)}data structures for functional programming in JavaScript.
Dialogue: 2,0:00:44.87,0:00:49.48,720CN,,0,0,0,,{\fad(120,120)}JavaScript中，函数式编程里不可变的数据结构
Dialogue: 2,0:00:49.48,0:00:54.92,720EN,,0,0,0,,{\fad(120,120)}We're going to take a look at what immutable data structures are, why they're a really
Dialogue: 2,0:00:49.48,0:00:54.93,720CN,,0,0,0,,{\fad(120,120)}我们将看看什么是不变的数据结构
Dialogue: 2,0:00:54.92,0:00:59.82,720EN,,0,0,0,,{\fad(120,120)}cool way to handle the immutability that we typically use when we're doing functional
Dialogue: 2,0:00:54.93,0:00:59.82,720CN,,0,0,0,,{\fad(120,120)}为什么它们是函数式编程中处理不变性的好方法
Dialogue: 2,0:00:59.82,0:01:06.34,720EN,,0,0,0,,{\fad(120,120)}programming and how we can do that in JavaScript because I hear y'all like JavaScript!
Dialogue: 2,0:00:59.82,0:01:06.35,720CN,,0,0,0,,{\fad(120,120)}以及我们如何在JavaScript中做到这一点\N因为我听说你们都喜欢JavaScript！
Dialogue: 2,0:01:06.34,0:01:09.14,720EN,,0,0,0,,{\fad(120,120)}So a little about me.
Dialogue: 2,0:01:06.35,0:01:09.15,720CN,,0,0,0,,{\fad(120,120)}关于我的点滴
Dialogue: 2,0:01:09.15,0:01:12.29,720EN,,0,0,0,,{\fad(120,120)}I'm probably the only not-web-developer in the room.
Dialogue: 2,0:01:09.15,0:01:12.29,720CN,,0,0,0,,{\fad(120,120)}我可能是这里唯一的非网络开发人员
Dialogue: 2,0:01:12.29,0:01:14.76,720EN,,0,0,0,,{\fad(120,120)}I am an engineer for Uber Research.
Dialogue: 2,0:01:12.29,0:01:14.97,720CN,,0,0,0,,{\fad(120,120)}我是Uber Research的工程师
Dialogue: 2,0:01:14.96,0:01:20.46,720EN,,0,0,0,,{\fad(120,120)}I work with them to develop a custom query language for data in the scientific research
Dialogue: 2,0:01:14.97,0:01:20.47,720CN,,0,0,0,,{\fad(120,120)}我参与开发一种自定义数据查询语言
Dialogue: 2,0:01:20.46,0:01:21.84,720EN,,0,0,0,,{\fad(120,120)}funding domain.
Dialogue: 2,0:01:20.47,0:01:21.85,720CN,,0,0,0,,{\fad(120,120)}用于科学研究基金领域
Dialogue: 2,0:01:21.84,0:01:25.94,720EN,,0,0,0,,{\fad(120,120)}I'm also an alum of the Recurse Center, which is a fantastic programming community in New
Dialogue: 2,0:01:21.85,0:01:25.95,720CN,,0,0,0,,{\fad(120,120)}我也是Recurse中心的成员。这是纽约的一个很棒的编程社区
Dialogue: 2,0:01:25.95,0:01:32.56,720EN,,0,0,0,,{\fad(120,120)}York City, and I am an alum of the Outreach Program, which if you have haven't heard of
Dialogue: 2,0:01:25.95,0:01:32.56,720CN,,0,0,0,,{\fad(120,120)}我也是Outreach项目的一员，你可能没听说过
Dialogue: 2,0:01:32.56,0:01:41.00,720EN,,0,0,0,,{\fad(120,120)}it, it's getting women and more folks involved in these by giving them internships at Mozilla.
Dialogue: 2,0:01:32.56,0:01:41.21,720CN,,0,0,0,,{\fad(120,120)}它吸引了更多的女性和少数群体参与，在Mozilla给他们提供实习机会。
Dialogue: 2,0:01:41.20,0:01:49.26,720EN,,0,0,0,,{\fad(120,120)}So I'm really happy to chat about those things if you want to come grab me after the talk.
Dialogue: 2,0:01:41.21,0:01:49.27,720CN,,0,0,0,,{\fad(120,120)}所以我很高兴谈论这些事情，你们可以演讲之后来找我
Dialogue: 2,0:01:49.26,0:01:54.40,720EN,,0,0,0,,{\fad(120,120)}But you might know that I like functional programming.
Dialogue: 2,0:01:49.27,0:01:54.40,720CN,,0,0,0,,{\fad(120,120)}但是你可能已经知道我喜欢函数式编程
Dialogue: 2,0:01:54.40,0:01:55.90,720EN,,0,0,0,,{\fad(120,120)}I think it rocks.
Dialogue: 2,0:01:54.40,0:01:55.90,720CN,,0,0,0,,{\fad(120,120)}我认为函数式编程很酷
Dialogue: 2,0:01:55.90,0:01:59.56,720EN,,0,0,0,,{\fad(120,120)}Anybody else agree with me that functional programming is cool?
Dialogue: 2,0:01:55.90,0:01:59.77,720CN,,0,0,0,,{\fad(120,120)}其他人都同意我的观点，觉得函数式编程很酷吗？
Dialogue: 2,0:01:59.76,0:02:00.76,720EN,,0,0,0,,{\fad(120,120)}Yeah!
Dialogue: 2,0:01:59.77,0:02:00.77,720CN,,0,0,0,,{\fad(120,120)}是的
Dialogue: 2,0:02:00.76,0:02:07.54,720EN,,0,0,0,,{\fad(120,120)}Yeah, so functional programming is a pretty great way to avoid some of the headaches of
Dialogue: 2,0:02:00.77,0:02:07.54,720CN,,0,0,0,,{\fad(120,120)}是的，所以函数式编程避免了很多
Dialogue: 2,0:02:07.54,0:02:10.18,720EN,,0,0,0,,{\fad(120,120)}like imperative and object-oriented programming.
Dialogue: 2,0:02:07.54,0:02:10.19,720CN,,0,0,0,,{\fad(120,120)}命令式和面向对象的编程的问题
Dialogue: 2,0:02:10.18,0:02:15.40,720EN,,0,0,0,,{\fad(120,120)}In functional programming, what we typically do is conceive of our programs as being just
Dialogue: 2,0:02:10.19,0:02:15.40,720CN,,0,0,0,,{\fad(120,120)}在函数式编程中，通常所做的只是将我们的程序视为
Dialogue: 2,0:02:15.40,0:02:16.53,720EN,,0,0,0,,{\fad(120,120)}pure functions.
Dialogue: 2,0:02:15.40,0:02:16.73,720CN,,0,0,0,,{\fad(120,120)}纯函数
Dialogue: 2,0:02:16.72,0:02:22.48,720EN,,0,0,0,,{\fad(120,120)}That means their transform their inputs to outputs, and that's all they do.
Dialogue: 2,0:02:16.73,0:02:22.48,720CN,,0,0,0,,{\fad(120,120)}这意味着他们将输入转换为输出，这就是他们所做的全部
Dialogue: 2,0:02:22.48,0:02:29.00,720EN,,0,0,0,,{\fad(120,120)}They don't have my side effects like changing things in the console, and my taking things
Dialogue: 2,0:02:22.48,0:02:29.20,720CN,,0,0,0,,{\fad(120,120)}他们没有副作用，在console中打印内容。或者是
Dialogue: 2,0:02:29.19,0:02:31.78,720EN,,0,0,0,,{\fad(120,120)}in the global state are side effects.
Dialogue: 2,0:02:29.20,0:02:31.78,720CN,,0,0,0,,{\fad(120,120)}改变全局作用域中的值
Dialogue: 2,0:02:31.78,0:02:38.21,720EN,,0,0,0,,{\fad(120,120)}But our data becomes data in, data out, and transformers of data.
Dialogue: 2,0:02:31.78,0:02:38.21,720CN,,0,0,0,,{\fad(120,120)}但是我们的数据变成了数据输入，数据输出和数据转换。
Dialogue: 2,0:02:38.21,0:02:43.09,720EN,,0,0,0,,{\fad(120,120)}And one thing that goes hand-in-hand with this, with avoiding side effects is immutable
Dialogue: 2,0:02:38.21,0:02:43.29,720CN,,0,0,0,,{\fad(120,120)}与之紧密相连的一件事，能够避免副作用的是不可变
Dialogue: 2,0:02:43.28,0:02:44.60,720EN,,0,0,0,,{\fad(120,120)}data.
Dialogue: 2,0:02:43.29,0:02:44.61,720CN,,0,0,0,,{\fad(120,120)}数据
Dialogue: 2,0:02:44.61,0:02:48.00,720EN,,0,0,0,,{\fad(120,120)}Immutable data meaning once we've created it, it never changes.
Dialogue: 2,0:02:44.61,0:02:48.00,720CN,,0,0,0,,{\fad(120,120)}不变的数据意味着我们创建之后\N它，它永远不会改变。
Dialogue: 2,0:02:48.00,0:02:53.08,720EN,,0,0,0,,{\fad(120,120)}So this is a really good way of changing something accidental outside of your function.
Dialogue: 2,0:02:48.00,0:02:53.08,720CN,,0,0,0,,{\fad(120,120)}这能避免数据在函数外意外被改变
Dialogue: 2,0:02:53.08,0:02:56.45,720EN,,0,0,0,,{\fad(120,120)}If everything is immutable, you can't change anything.
Dialogue: 2,0:02:53.08,0:02:56.65,720CN,,0,0,0,,{\fad(120,120)}如果一切都是不变的，那么你就无法改变\N任何东西
Dialogue: 2,0:02:56.65,0:03:02.71,720EN,,0,0,0,,{\fad(120,120)}So immutability another thing that rocks and it rocks pretty hard for other reasons that
Dialogue: 2,0:02:56.65,0:03:02.72,720CN,,0,0,0,,{\fad(120,120)}所以不可变性很酷，它很酷的原因是
Dialogue: 2,0:03:02.71,0:03:04.15,720EN,,0,0,0,,{\fad(120,120)}we'll see in a moment.
Dialogue: 2,0:03:02.72,0:03:04.16,720CN,,0,0,0,,{\fad(120,120)}我们一会儿会看到
Dialogue: 2,0:03:04.15,0:03:07.65,720EN,,0,0,0,,{\fad(120,120)}But speaking of rocks, let's talk about rocks.
Dialogue: 2,0:03:04.16,0:03:07.65,720CN,,0,0,0,,{\fad(120,120)}但是说到很酷，让我们谈谈岩石。
Dialogue: 2,0:03:07.65,0:03:14.10,720EN,,0,0,0,,{\fad(120,120)}So this is a rock, and immutability rocks in the way that rocks rock.
Dialogue: 2,0:03:07.65,0:03:14.11,720CN,,0,0,0,,{\fad(120,120)}所以这是一块岩石，而不变性和岩石一样酷
Dialogue: 2,0:03:14.11,0:03:18.04,720EN,,0,0,0,,{\fad(120,120)}Now I don't know about you, but I've been going to a lot of tech conferences recently
Dialogue: 2,0:03:14.11,0:03:18.04,720CN,,0,0,0,,{\fad(120,120)}我不知道你们，但是我最近参加很多技术会议
Dialogue: 2,0:03:18.04,0:03:21.64,720EN,,0,0,0,,{\fad(120,120)}and I've been feeling like there has enough poetry.
Dialogue: 2,0:03:18.04,0:03:21.84,720CN,,0,0,0,,{\fad(120,120)}我感到技术会议缺乏诗意
Dialogue: 2,0:03:21.84,0:03:28.28,720EN,,0,0,0,,{\fad(120,120)}So I'd like to read you a poem: Nobody sits like this rock sits.
Dialogue: 2,0:03:21.84,0:03:28.29,720CN,,0,0,0,,{\fad(120,120)}所以我想读一首诗：没有人像岩石一样坐着
Dialogue: 2,0:03:28.28,0:03:30.37,720EN,,0,0,0,,{\fad(120,120)}You rock, rock.
Dialogue: 2,0:03:28.29,0:03:30.37,720CN,,0,0,0,,{\fad(120,120)}你很酷，石头
Dialogue: 2,0:03:30.37,0:03:33.62,720EN,,0,0,0,,{\fad(120,120)}The rock just sits and is.
Dialogue: 2,0:03:30.37,0:03:33.62,720CN,,0,0,0,,{\fad(120,120)}岩石就此静坐
Dialogue: 2,0:03:33.62,0:03:36.43,720EN,,0,0,0,,{\fad(120,120)}You show us how to just sit here.
Dialogue: 2,0:03:33.62,0:03:36.43,720CN,,0,0,0,,{\fad(120,120)}你向我们展示了如何坐在这里
Dialogue: 2,0:03:36.43,0:03:38.29,720EN,,0,0,0,,{\fad(120,120)}And that's what we need.
Dialogue: 2,0:03:36.43,0:03:38.29,720CN,,0,0,0,,{\fad(120,120)}这就是我们所需要的
Dialogue: 2,0:03:38.29,0:03:40.53,720EN,,0,0,0,,{\fad(120,120)}It's so true, so deep.
Dialogue: 2,0:03:38.29,0:03:40.73,720CN,,0,0,0,,{\fad(120,120)}如此真实，如此深刻
Dialogue: 2,0:03:40.72,0:03:45.42,720EN,,0,0,0,,{\fad(120,120)}This is from -- Don't thank me, thank I Heart Huckabees, that's
Dialogue: 2,0:03:40.73,0:03:45.43,720CN,,0,0,0,,{\fad(120,120)}这是...不用谢谢我，谢谢《我 ❤ Huckabees》，那是
Dialogue: 2,0:03:45.43,0:03:46.43,720EN,,0,0,0,,{\fad(120,120)}a great movie.
Dialogue: 2,0:03:45.43,0:03:46.43,720CN,,0,0,0,,{\fad(120,120)}一部很棒的电影
Dialogue: 2,0:03:46.43,0:03:48.08,720EN,,0,0,0,,{\fad(120,120)}Check it out.
Dialogue: 2,0:03:46.43,0:03:48.08,720CN,,0,0,0,,{\fad(120,120)}去看看
Dialogue: 2,0:03:48.08,0:03:51.79,720EN,,0,0,0,,{\fad(120,120)}So this is really how immutable data rocks.
Dialogue: 2,0:03:48.08,0:03:51.79,720CN,,0,0,0,,{\fad(120,120)}因此，这确实是不可变数据的酷的地方
Dialogue: 2,0:03:51.79,0:03:53.43,720EN,,0,0,0,,{\fad(120,120)}It just sits there.
Dialogue: 2,0:03:51.79,0:03:53.43,720CN,,0,0,0,,{\fad(120,120)}它只是坐在那里
Dialogue: 2,0:03:53.43,0:03:54.43,720EN,,0,0,0,,{\fad(120,120)}It just is.
Dialogue: 2,0:03:53.43,0:03:54.43,720CN,,0,0,0,,{\fad(120,120)}就是这样
Dialogue: 2,0:03:54.43,0:03:58.93,720EN,,0,0,0,,{\fad(120,120)}Once we've created it, it never changes and that's amazing because it can help us avoid
Dialogue: 2,0:03:54.43,0:03:58.93,720CN,,0,0,0,,{\fad(120,120)}创建之后，它就永远不会改变。太神奇了，因为它可以帮助我们避免
Dialogue: 2,0:03:58.93,0:04:01.54,720EN,,0,0,0,,{\fad(120,120)}some of the headaches of immutability.
Dialogue: 2,0:03:58.93,0:04:01.54,720CN,,0,0,0,,{\fad(120,120)}可变性的一些烦恼
Dialogue: 2,0:04:01.54,0:04:08.09,720EN,,0,0,0,,{\fad(120,120)}So with immutability, we have some things pretty easy, but other things become harder
Dialogue: 2,0:04:01.54,0:04:08.09,720CN,,0,0,0,,{\fad(120,120)}因此，如果数据可变，我们有一些东西\N很容易，但是其他事情变得更困难
Dialogue: 2,0:04:08.09,0:04:09.25,720EN,,0,0,0,,{\fad(120,120)}and we'll see how that looks.
Dialogue: 2,0:04:08.09,0:04:09.25,720CN,,0,0,0,,{\fad(120,120)}我们将看看它的表现
Dialogue: 2,0:04:09.25,0:04:13.52,720EN,,0,0,0,,{\fad(120,120)}So let's say I have an array called foo and it's got some numbers in it.
Dialogue: 2,0:04:09.25,0:04:13.52,720CN,,0,0,0,,{\fad(120,120)}假设我有一个名为foo的数组，它里面有一些数字
Dialogue: 2,0:04:13.52,0:04:16.46,720EN,,0,0,0,,{\fad(120,120)}Hm, and I'm already bored.
Dialogue: 2,0:04:13.52,0:04:16.47,720CN,,0,0,0,,{\fad(120,120)}嗯，我已经很无聊了
Dialogue: 2,0:04:16.47,0:04:17.50,720EN,,0,0,0,,{\fad(120,120)}Let's make it more fun.
Dialogue: 2,0:04:16.47,0:04:17.50,720CN,,0,0,0,,{\fad(120,120)}让我们变得更有趣
Dialogue: 2,0:04:17.50,0:04:23.49,720EN,,0,0,0,,{\fad(120,120)}Let's say I have a zoo with some animals -- more fun!
Dialogue: 2,0:04:17.50,0:04:23.49,720CN,,0,0,0,,{\fad(120,120)}假设我有一个动物园里有一些动物-更有趣！
Dialogue: 2,0:04:23.49,0:04:26.51,720EN,,0,0,0,,{\fad(120,120)}And I decided that I want to change something up about my zoo.
Dialogue: 2,0:04:23.49,0:04:26.52,720CN,,0,0,0,,{\fad(120,120)}我决定要改变动物园一些东西
Dialogue: 2,0:04:26.51,0:04:30.12,720EN,,0,0,0,,{\fad(120,120)}Maybe I want to replace that rabbit there with something a little more exotic.
Dialogue: 2,0:04:26.52,0:04:30.13,720CN,,0,0,0,,{\fad(120,120)}也许我想在那里替换那只兔子，换上有异国情调的东西
Dialogue: 2,0:04:30.12,0:04:32.73,720EN,,0,0,0,,{\fad(120,120)}Like an alien!
Dialogue: 2,0:04:30.13,0:04:32.73,720CN,,0,0,0,,{\fad(120,120)}比如外星人！
Dialogue: 2,0:04:32.73,0:04:33.73,720EN,,0,0,0,,{\fad(120,120)}So this is cool.
Dialogue: 2,0:04:32.73,0:04:33.73,720CN,,0,0,0,,{\fad(120,120)}所以这很酷
Dialogue: 2,0:04:33.73,0:04:36.25,720EN,,0,0,0,,{\fad(120,120)}I'm happy because I wanted a more exotic zoo.
Dialogue: 2,0:04:33.73,0:04:36.25,720CN,,0,0,0,,{\fad(120,120)}我很高兴，因为我想要一个更具异国情调的动物园
Dialogue: 2,0:04:36.25,0:04:38.00,720EN,,0,0,0,,{\fad(120,120)}I got an alien in my zoo now.
Dialogue: 2,0:04:36.25,0:04:38.01,720CN,,0,0,0,,{\fad(120,120)}我的动物园里有一个外星人
Dialogue: 2,0:04:38.00,0:04:42.38,720EN,,0,0,0,,{\fad(120,120)}I didn't have to change anything except for that one little cell in my array.
Dialogue: 2,0:04:38.01,0:04:42.39,720CN,,0,0,0,,{\fad(120,120)}我不需要改变任何东西，除了数组中的那个元素
Dialogue: 2,0:04:42.38,0:04:49.30,720EN,,0,0,0,,{\fad(120,120)}That's pretty sweet but my co-worker over was expecting zoo to be filled with earth
Dialogue: 2,0:04:42.39,0:04:49.30,720CN,,0,0,0,,{\fad(120,120)}真是太好了，但我的同事希望动物园充满地球生物
Dialogue: 2,0:04:49.30,0:04:54.55,720EN,,0,0,0,,{\fad(120,120)}beings, earth animals, and wasn't accounting for there being an alien in it.
Dialogue: 2,0:04:49.30,0:04:54.55,720CN,,0,0,0,,{\fad(120,120)}地球上的动物，不打算放外星人
Dialogue: 2,0:04:54.55,0:04:56.50,720EN,,0,0,0,,{\fad(120,120)}Who put that in there?
Dialogue: 2,0:04:54.55,0:04:56.51,720CN,,0,0,0,,{\fad(120,120)}谁把它放在那里的？
Dialogue: 2,0:04:56.50,0:04:58.81,720EN,,0,0,0,,{\fad(120,120)}Now my program doesn't work anymore.
Dialogue: 2,0:04:56.51,0:04:58.82,720CN,,0,0,0,,{\fad(120,120)}现在我的程序不再运行了
Dialogue: 2,0:04:58.81,0:05:00.42,720EN,,0,0,0,,{\fad(120,120)}Who did that?
Dialogue: 2,0:04:58.82,0:05:00.42,720CN,,0,0,0,,{\fad(120,120)}谁做的？
Dialogue: 2,0:05:00.42,0:05:04.38,720EN,,0,0,0,,{\fad(120,120)}So immutability has a couple problems.
Dialogue: 2,0:05:00.42,0:05:04.59,720CN,,0,0,0,,{\fad(120,120)}因此，可变性有两个问题
Dialogue: 2,0:05:04.58,0:05:10.68,720EN,,0,0,0,,{\fad(120,120)}We have to manage who's been changing what, when -- who's been putting which animals in
Dialogue: 2,0:05:04.59,0:05:10.69,720CN,,0,0,0,,{\fad(120,120)}我们必须管理谁在改变什么，什么时候-谁在放哪些动物
Dialogue: 2,0:05:10.68,0:05:11.68,720EN,,0,0,0,,{\fad(120,120)}the zoo.
Dialogue: 2,0:05:10.69,0:05:11.69,720CN,,0,0,0,,{\fad(120,120)}到动物园中
Dialogue: 2,0:05:11.68,0:05:16.87,720EN,,0,0,0,,{\fad(120,120)}We have to have a lot of overhead to manage that state, and that gives us headaches as
Dialogue: 2,0:05:11.69,0:05:16.88,720CN,,0,0,0,,{\fad(120,120)}我们必须管理很多开销，这让我们头疼
Dialogue: 2,0:05:16.87,0:05:19.68,720EN,,0,0,0,,{\fad(120,120)}individuals, and as teams.
Dialogue: 2,0:05:16.88,0:05:19.69,720CN,,0,0,0,,{\fad(120,120)}无论个人还是团队
Dialogue: 2,0:05:19.68,0:05:23.96,720EN,,0,0,0,,{\fad(120,120)}We also get bugs in the code because maybe I was only planning -- or my co-worker was
Dialogue: 2,0:05:19.69,0:05:23.97,720CN,,0,0,0,,{\fad(120,120)}我们还会在代码中出现错误，因为也许\N我只是在计划-或者我的同事是
Dialogue: 2,0:05:23.97,0:05:29.93,720EN,,0,0,0,,{\fad(120,120)}only planning -- to handle terrestrial beings and didn't have a case of aliens being accounted
Dialogue: 2,0:05:23.97,0:05:30.14,720CN,,0,0,0,,{\fad(120,120)}仅计划-处理陆地生物，也不包含外星人的情况
Dialogue: 2,0:05:30.13,0:05:32.77,720EN,,0,0,0,,{\fad(120,120)}for, and that broke something.
Dialogue: 2,0:05:30.14,0:05:32.78,720CN,,0,0,0,,{\fad(120,120)}于是一些东西被破坏了
Dialogue: 2,0:05:32.77,0:05:37.38,720EN,,0,0,0,,{\fad(120,120)}So these are some side effects of immutability that don't make us happy.
Dialogue: 2,0:05:32.78,0:05:37.39,720CN,,0,0,0,,{\fad(120,120)}所以这些是可变性的一些副作用\N那不会让我们开心
Dialogue: 2,0:05:37.38,0:05:40.45,720EN,,0,0,0,,{\fad(120,120)}Let's try doing things the immutable way.
Dialogue: 2,0:05:37.39,0:05:40.46,720CN,,0,0,0,,{\fad(120,120)}让我们尝试以不变的方式做事
Dialogue: 2,0:05:40.45,0:05:47.14,720EN,,0,0,0,,{\fad(120,120)}So in an immutable world, my array, my zoo, once I've created it, it just sits and is
Dialogue: 2,0:05:40.46,0:05:47.15,720CN,,0,0,0,,{\fad(120,120)}所以在一个不变的世界里，我的数组，我的动物园，一旦我创建了它，它就像石头一样呆在那儿
Dialogue: 2,0:05:47.14,0:05:48.14,720EN,,0,0,0,,{\fad(120,120)}forever.
Dialogue: 2,0:05:47.15,0:05:48.15,720CN,,0,0,0,,{\fad(120,120)}永远
Dialogue: 2,0:05:48.14,0:05:50.27,720EN,,0,0,0,,{\fad(120,120)}I cannot change it.
Dialogue: 2,0:05:48.15,0:05:50.28,720CN,,0,0,0,,{\fad(120,120)}我无法更改
Dialogue: 2,0:05:50.27,0:05:56.29,720EN,,0,0,0,,{\fad(120,120)}What I can do if I want a new zoo that's more exotic is I can make a copy that's the same
Dialogue: 2,0:05:50.28,0:05:56.30,720CN,,0,0,0,,{\fad(120,120)}如果我想要一个更有异国情调的新动物园，我可以复制副本
Dialogue: 2,0:05:56.30,0:06:03.47,720EN,,0,0,0,,{\fad(120,120)}size as my original array, and I can make the modification I want, so I can put my alien
Dialogue: 2,0:05:56.30,0:06:03.47,720CN,,0,0,0,,{\fad(120,120)}大小与原始数组一样，我可以做想要的修改，于是我把我的外星人
Dialogue: 2,0:06:03.47,0:06:05.05,720EN,,0,0,0,,{\fad(120,120)}in there in place of the rabbit.
Dialogue: 2,0:06:03.47,0:06:05.05,720CN,,0,0,0,,{\fad(120,120)}放在那里代替兔子。
Dialogue: 2,0:06:05.05,0:06:15.00,720EN,,0,0,0,,{\fad(120,120)}And so this is pretty sweet because now my co-worker is maybe, and they're, like, whoo
Dialogue: 2,0:06:05.05,0:06:15.01,720CN,,0,0,0,,{\fad(120,120)}所以这很不错，因为现在我的同事会说，哇
Dialogue: 2,0:06:15.00,0:06:20.71,720EN,,0,0,0,,{\fad(120,120)}nothing broke in my program, and it's all still animal creatures but I had to copy over
Dialogue: 2,0:06:15.01,0:06:20.72,720CN,,0,0,0,,{\fad(120,120)}我的程序没被破坏，仍然是动物，但我不得不复制
Dialogue: 2,0:06:20.72,0:06:21.97,720EN,,0,0,0,,{\fad(120,120)}that whole array.
Dialogue: 2,0:06:20.72,0:06:21.97,720CN,,0,0,0,,{\fad(120,120)}整个数组
Dialogue: 2,0:06:21.97,0:06:28.38,720EN,,0,0,0,,{\fad(120,120)}I had to allocate the space for that entire array, even all of the stuff that didn't change.
Dialogue: 2,0:06:21.97,0:06:28.59,720CN,,0,0,0,,{\fad(120,120)}我必须为整个数组申请空间，甚至所有不变的东西
Dialogue: 2,0:06:28.58,0:06:32.09,720EN,,0,0,0,,{\fad(120,120)}I had to copy all of that over, as well.
Dialogue: 2,0:06:28.59,0:06:32.10,720CN,,0,0,0,,{\fad(120,120)}我也必须全部复制
Dialogue: 2,0:06:32.10,0:06:35.43,720EN,,0,0,0,,{\fad(120,120)}So this means that my code runs pretty slow.
Dialogue: 2,0:06:32.10,0:06:35.44,720CN,,0,0,0,,{\fad(120,120)}因此，这意味着我的代码运行得很慢
Dialogue: 2,0:06:35.43,0:06:37.08,720EN,,0,0,0,,{\fad(120,120)}And it also takes up a lot of memory.
Dialogue: 2,0:06:35.44,0:06:37.09,720CN,,0,0,0,,{\fad(120,120)}而且它还占用大量内存
Dialogue: 2,0:06:37.08,0:06:39.45,720EN,,0,0,0,,{\fad(120,120)}It takes up a lot of space and time.
Dialogue: 2,0:06:37.09,0:06:39.46,720CN,,0,0,0,,{\fad(120,120)}它占用大量空间和时间
Dialogue: 2,0:06:39.45,0:06:44.70,720EN,,0,0,0,,{\fad(120,120)}The complexity on those things are bad because copying is a waste of both time and space.
Dialogue: 2,0:06:39.46,0:06:44.71,720CN,,0,0,0,,{\fad(120,120)}这些事情的复杂性不好，因为\N复制是浪费时间和空间。
Dialogue: 2,0:06:44.70,0:06:46.08,720EN,,0,0,0,,{\fad(120,120)}It makes us sad face!
Dialogue: 2,0:06:44.71,0:06:46.09,720CN,,0,0,0,,{\fad(120,120)}它使我们悲伤！
Dialogue: 2,0:06:46.08,0:06:47.21,720EN,,0,0,0,,{\fad(120,120)}We don't want that.
Dialogue: 2,0:06:46.09,0:06:47.22,720CN,,0,0,0,,{\fad(120,120)}我们不想那样
Dialogue: 2,0:06:47.22,0:06:52.04,720EN,,0,0,0,,{\fad(120,120)}So if we want to do immutability, we must be able to find a better way of doing that.
Dialogue: 2,0:06:47.22,0:06:52.04,720CN,,0,0,0,,{\fad(120,120)}因此，如果要实现不变性，我们必须\N能够找到一种更好的方法
Dialogue: 2,0:06:52.04,0:06:56.88,720EN,,0,0,0,,{\fad(120,120)}Luckily for us, a lot of very smart folks have been thinking very hard about this problem
Dialogue: 2,0:06:52.04,0:06:57.09,720CN,,0,0,0,,{\fad(120,120)}对我们来说幸运的是，很多非常聪明的人\N一直在认真思考这个问题
Dialogue: 2,0:06:57.08,0:07:00.07,720EN,,0,0,0,,{\fad(120,120)}for a while, and they've come up with some really good solutions for how we can deal
Dialogue: 2,0:06:57.09,0:07:00.08,720CN,,0,0,0,,{\fad(120,120)}他们想出了一些非常好的解决方案
Dialogue: 2,0:07:00.07,0:07:02.12,720EN,,0,0,0,,{\fad(120,120)}with immutability efficiently.
Dialogue: 2,0:07:00.08,0:07:02.13,720CN,,0,0,0,,{\fad(120,120)}关于有效的实现不变性
Dialogue: 2,0:07:02.12,0:07:05.50,720EN,,0,0,0,,{\fad(120,120)}immutable data structures!
Dialogue: 2,0:07:02.13,0:07:05.50,720CN,,0,0,0,,{\fad(120,120)}不变的数据结构！
Dialogue: 2,0:07:05.50,0:07:10.66,720EN,,0,0,0,,{\fad(120,120)}So immutable data structures is a term that you may have heard about, with functional
Dialogue: 2,0:07:05.50,0:07:10.66,720CN,,0,0,0,,{\fad(120,120)}因此，不变的数据结构是一个术语，\N你可能已经听说过
Dialogue: 2,0:07:10.66,0:07:14.37,720EN,,0,0,0,,{\fad(120,120)}programming, or also in terms of React where they come in handy.
Dialogue: 2,0:07:10.66,0:07:14.57,720CN,,0,0,0,,{\fad(120,120)}在函数式编程中，或者就React而言\N他们派上用场了
Dialogue: 2,0:07:14.56,0:07:21.77,720EN,,0,0,0,,{\fad(120,120)}Technically, an immutable data structure is like the rock, it just sits, and is once you
Dialogue: 2,0:07:14.57,0:07:21.78,720CN,,0,0,0,,{\fad(120,120)}理论上说，不变的数据结构是就像石头一样，它就坐着
Dialogue: 2,0:07:21.77,0:07:22.77,720EN,,0,0,0,,{\fad(120,120)}create it.
Dialogue: 2,0:07:21.78,0:07:22.78,720CN,,0,0,0,,{\fad(120,120)}一旦你创造它
Dialogue: 2,0:07:22.77,0:07:24.43,720EN,,0,0,0,,{\fad(120,120)}It never changes.
Dialogue: 2,0:07:22.78,0:07:24.44,720CN,,0,0,0,,{\fad(120,120)}它永远不会改变
Dialogue: 2,0:07:24.43,0:07:28.31,720EN,,0,0,0,,{\fad(120,120)}But also hear the term persistent data structures banged about.
Dialogue: 2,0:07:24.44,0:07:28.31,720CN,,0,0,0,,{\fad(120,120)}但是经常也可以听到术语“持久数据结构”
Dialogue: 2,0:07:28.31,0:07:31.16,720EN,,0,0,0,,{\fad(120,120)}Sometimes these are used interchangeably, but they have slightly different meanings.
Dialogue: 2,0:07:28.31,0:07:31.16,720CN,,0,0,0,,{\fad(120,120)}有时这些可以互换使用，但它们的含义略有不同
Dialogue: 2,0:07:31.16,0:07:38.68,720EN,,0,0,0,,{\fad(120,120)}So if immutable data is data that never changes, persistent data is data for which we have
Dialogue: 2,0:07:31.16,0:07:38.69,720CN,,0,0,0,,{\fad(120,120)}因此，如果不可变数据是永远不变的数据，\N持久数据是我们
Dialogue: 2,0:07:38.68,0:07:40.66,720EN,,0,0,0,,{\fad(120,120)}access to old versions.
Dialogue: 2,0:07:38.69,0:07:40.66,720CN,,0,0,0,,{\fad(120,120)}能访问其旧版本的数据
Dialogue: 2,0:07:40.66,0:07:46.57,720EN,,0,0,0,,{\fad(120,120)}So as we've been creating new modified versions of our data structures, we keep the old versions
Dialogue: 2,0:07:40.66,0:07:46.78,720CN,,0,0,0,,{\fad(120,120)}因此，由于我们一直在创建新的修改版本\N的同时
Dialogue: 2,0:07:46.77,0:07:48.15,720EN,,0,0,0,,{\fad(120,120)}around.
Dialogue: 2,0:07:46.78,0:07:48.16,720CN,,0,0,0,,{\fad(120,120)}我们保留了旧版本
Dialogue: 2,0:07:48.16,0:07:53.07,720EN,,0,0,0,,{\fad(120,120)}You might hear about partially persistent data structures where we can look at the old
Dialogue: 2,0:07:48.16,0:07:53.28,720CN,,0,0,0,,{\fad(120,120)}你可能听说过部分持久性，我们可以查看旧的数据版本
Dialogue: 2,0:07:53.27,0:07:57.01,720EN,,0,0,0,,{\fad(120,120)}versions, we can access them, but we can't go back and update any of them.
Dialogue: 2,0:07:53.28,0:07:57.02,720CN,,0,0,0,,{\fad(120,120)}我们可以访问它们，但不能返回并更新其中任何一个
Dialogue: 2,0:07:57.01,0:08:01.39,720EN,,0,0,0,,{\fad(120,120)}All we can update is the most current version that we have.
Dialogue: 2,0:07:57.02,0:08:01.40,720CN,,0,0,0,,{\fad(120,120)}我们只能更新最新版本
Dialogue: 2,0:08:01.39,0:08:05.93,720EN,,0,0,0,,{\fad(120,120)}And then you might also hear about fully persistent data structures where we can actually time
Dialogue: 2,0:08:01.40,0:08:05.94,720CN,,0,0,0,,{\fad(120,120)}然后你可能还听说过完全持久数据结构
Dialogue: 2,0:08:05.93,0:08:09.50,720EN,,0,0,0,,{\fad(120,120)}travel, we can go back and update any of our past versions.
Dialogue: 2,0:08:05.94,0:08:09.50,720CN,,0,0,0,,{\fad(120,120)}我们可以时间旅行，回去更新我们的任何\N过去的版本
Dialogue: 2,0:08:09.50,0:08:15.61,720EN,,0,0,0,,{\fad(120,120)}And if this is starting to ring a bell like it's version control like git, it's sort of
Dialogue: 2,0:08:09.50,0:08:15.61,720CN,,0,0,0,,{\fad(120,120)}如果这让你想起了像git这样的版本控制
Dialogue: 2,0:08:15.61,0:08:17.07,720EN,,0,0,0,,{\fad(120,120)}the same idea.
Dialogue: 2,0:08:15.61,0:08:17.28,720CN,,0,0,0,,{\fad(120,120)}他们其实是同样的想法
Dialogue: 2,0:08:17.27,0:08:21.58,720EN,,0,0,0,,{\fad(120,120)}So we're going to talk about these as persistent immutable data structures, they're both persistent
Dialogue: 2,0:08:17.28,0:08:21.59,720CN,,0,0,0,,{\fad(120,120)}因此，我们将这些称为持久不可变数据结构，它们是持久的
Dialogue: 2,0:08:21.58,0:08:22.96,720EN,,0,0,0,,{\fad(120,120)}and immutable.
Dialogue: 2,0:08:21.59,0:08:22.97,720CN,,0,0,0,,{\fad(120,120)}并且是不变的
Dialogue: 2,0:08:22.97,0:08:26.13,720EN,,0,0,0,,{\fad(120,120)}Let's see how this works.
Dialogue: 2,0:08:22.97,0:08:26.34,720CN,,0,0,0,,{\fad(120,120)}让我们看看它是如何工作的
Dialogue: 2,0:08:26.33,0:08:30.92,720EN,,0,0,0,,{\fad(120,120)}The key to all of this is we want the old versions of our data, like, my original zoo
Dialogue: 2,0:08:26.34,0:08:30.93,720CN,,0,0,0,,{\fad(120,120)}所有这些的关键是，我们想要旧的数据版本，例如我的原始动物园
Dialogue: 2,0:08:30.93,0:08:31.93,720EN,,0,0,0,,{\fad(120,120)}to stay put.
Dialogue: 2,0:08:30.93,0:08:31.93,720CN,,0,0,0,,{\fad(120,120)}保持不变
Dialogue: 2,0:08:31.93,0:08:37.65,720EN,,0,0,0,,{\fad(120,120)}We just want to to sit like the rock but we want new versions to be created efficiently.
Dialogue: 2,0:08:31.93,0:08:37.66,720CN,,0,0,0,,{\fad(120,120)}我们只是想让它像岩石一样坐着，但是我们\N希望有效地创建新版本
Dialogue: 2,0:08:37.65,0:08:44.51,720EN,,0,0,0,,{\fad(120,120)}So what magical tricks do we have to use to, like, make this happen?
Dialogue: 2,0:08:37.66,0:08:44.52,720CN,,0,0,0,,{\fad(120,120)}因此，我们使用什么魔法做到这一点？
Dialogue: 2,0:08:44.51,0:08:51.93,720EN,,0,0,0,,{\fad(120,120)}Do we have to make invocations do dances to the gods of space and time complexity?
Dialogue: 2,0:08:44.52,0:08:51.94,720CN,,0,0,0,,{\fad(120,120)}我们是否必须祈祷，对着时间和空间复杂性之神跳舞？
Dialogue: 2,0:08:51.94,0:08:52.80,720EN,,0,0,0,,{\fad(120,120)}No.
Dialogue: 2,0:08:51.94,0:08:53.01,720CN,,0,0,0,,{\fad(120,120)}不
Dialogue: 2,0:08:53.00,0:08:54.66,720EN,,0,0,0,,{\fad(120,120)}It's very simple.
Dialogue: 2,0:08:53.01,0:08:54.67,720CN,,0,0,0,,{\fad(120,120)}非常简单
Dialogue: 2,0:08:54.66,0:08:56.78,720EN,,0,0,0,,{\fad(120,120)}Trees and sharing.
Dialogue: 2,0:08:54.67,0:08:56.79,720CN,,0,0,0,,{\fad(120,120)}树结构和共享
Dialogue: 2,0:08:56.78,0:08:58.89,720EN,,0,0,0,,{\fad(120,120)}Isn't that sweet?
Dialogue: 2,0:08:56.79,0:08:58.90,720CN,,0,0,0,,{\fad(120,120)}这不香吗？
Dialogue: 2,0:08:58.89,0:09:03.57,720EN,,0,0,0,,{\fad(120,120)}These two simple concepts will get us efficient immutable data.
Dialogue: 2,0:08:58.90,0:09:03.58,720CN,,0,0,0,,{\fad(120,120)}这两个简单的概念带给我们高效的不变数据
Dialogue: 2,0:09:03.58,0:09:05.22,720EN,,0,0,0,,{\fad(120,120)}How?
Dialogue: 2,0:09:03.58,0:09:05.22,720CN,,0,0,0,,{\fad(120,120)}怎么做的？
Dialogue: 2,0:09:05.22,0:09:09.10,720EN,,0,0,0,,{\fad(120,120)}So let's talk about trees because trees rock pretty hard, as well, alternative, unfortunately
Dialogue: 2,0:09:05.22,0:09:09.10,720CN,,0,0,0,,{\fad(120,120)}所以我们来谈谈树，因为树木也很酷
Dialogue: 2,0:09:09.10,0:09:13.09,720EN,,0,0,0,,{\fad(120,120)}I don't have a poem for that, sorry.
Dialogue: 2,0:09:09.10,0:09:13.30,720CN,,0,0,0,,{\fad(120,120)}但是很遗憾我没有诗
Dialogue: 2,0:09:13.29,0:09:19.21,720EN,,0,0,0,,{\fad(120,120)}Imagine that we could find a way to represent our zoo array as a tree.
Dialogue: 2,0:09:13.30,0:09:19.22,720CN,,0,0,0,,{\fad(120,120)}想象一下，我们可以把我们的动物园表示为一棵树
Dialogue: 2,0:09:19.22,0:09:23.25,720EN,,0,0,0,,{\fad(120,120)}So one thing I could do is I could put all of my animals -- all of my values -- in the
Dialogue: 2,0:09:19.22,0:09:23.26,720CN,,0,0,0,,{\fad(120,120)}所以我可以做的一件事就是我可以把所有\N我所有的动物-我所有的值
Dialogue: 2,0:09:23.25,0:09:28.88,720EN,,0,0,0,,{\fad(120,120)}leaves of a tree, and I could make it so that each leaf holds one value, one animal.
Dialogue: 2,0:09:23.26,0:09:28.89,720CN,,0,0,0,,{\fad(120,120)}放在一棵树的叶子，我可以做到每片叶子拥有一个值，一只动物。
Dialogue: 2,0:09:28.88,0:09:31.46,720EN,,0,0,0,,{\fad(120,120)}But they might get lonely, so let's put them with a buddy.
Dialogue: 2,0:09:28.89,0:09:31.46,720CN,,0,0,0,,{\fad(120,120)}但是他们可能会变得寂寞，所以让我们把它们和一个伙伴放在一起。
Dialogue: 2,0:09:31.46,0:09:33.57,720EN,,0,0,0,,{\fad(120,120)}Let's put them 2x2.
Dialogue: 2,0:09:31.46,0:09:33.57,720CN,,0,0,0,,{\fad(120,120)}让我们把它们每两个放在一起
Dialogue: 2,0:09:33.57,0:09:37.32,720EN,,0,0,0,,{\fad(120,120)}So each of our leaves will have two values and we'll hope that the buddies get along
Dialogue: 2,0:09:33.57,0:09:37.53,720CN,,0,0,0,,{\fad(120,120)}所以我们的每一片叶子都有两个值。我们希望朋友们相处融洽
Dialogue: 2,0:09:37.52,0:09:43.76,720EN,,0,0,0,,{\fad(120,120)}and not each each other -- looking at you, tiger, number six, don't eat that koala, and
Dialogue: 2,0:09:37.53,0:09:43.77,720CN,,0,0,0,,{\fad(120,120)}而不是彼此-我说你呢老虎，6号，不要吃考拉
Dialogue: 2,0:09:43.76,0:09:49.93,720EN,,0,0,0,,{\fad(120,120)}we can go up to intermediate nodes up and up, until we get to the root node of the whole
Dialogue: 2,0:09:43.77,0:09:49.93,720CN,,0,0,0,,{\fad(120,120)}我们可以上升到中间节点，直到我们到达整体的根节点
Dialogue: 2,0:09:49.93,0:09:57.24,720EN,,0,0,0,,{\fad(120,120)}structure, and now that root is an array represented previously by a tree.
Dialogue: 2,0:09:49.93,0:09:57.24,720CN,,0,0,0,,{\fad(120,120)}现在根是一个表示为一棵树的数组
Dialogue: 2,0:09:57.24,0:10:01.90,720EN,,0,0,0,,{\fad(120,120)}So this is my tree now in this structure.
Dialogue: 2,0:09:57.24,0:10:01.91,720CN,,0,0,0,,{\fad(120,120)}所以这是我现在的树
Dialogue: 2,0:10:01.90,0:10:05.87,720EN,,0,0,0,,{\fad(120,120)}So given this type of structure, how do we update something?
Dialogue: 2,0:10:01.91,0:10:05.88,720CN,,0,0,0,,{\fad(120,120)}鉴于这种类型的结构，我们如何更新数据？
Dialogue: 2,0:10:05.87,0:10:09.47,720EN,,0,0,0,,{\fad(120,120)}Given that my data is immutable, and it can never change, how can I handle the fact that
Dialogue: 2,0:10:05.88,0:10:09.47,720CN,,0,0,0,,{\fad(120,120)}鉴于我的数据是不可变的，并且它永不改变，我该如何处理
Dialogue: 2,0:10:09.47,0:10:12.87,720EN,,0,0,0,,{\fad(120,120)}it has an alien in it.
Dialogue: 2,0:10:09.47,0:10:12.87,720CN,,0,0,0,,{\fad(120,120)}它里面有一个外星人
Dialogue: 2,0:10:12.87,0:10:17.59,720EN,,0,0,0,,{\fad(120,120)}So here what I would do is I would take the node that contains the value that I want to
Dialogue: 2,0:10:12.87,0:10:17.59,720CN,,0,0,0,,{\fad(120,120)}所以在这里我要做的是，找出
Dialogue: 2,0:10:17.59,0:10:18.59,720EN,,0,0,0,,{\fad(120,120)}change.
Dialogue: 2,0:10:17.59,0:10:18.59,720CN,,0,0,0,,{\fad(120,120)}我要更改的节点
Dialogue: 2,0:10:18.59,0:10:26.88,720EN,,0,0,0,,{\fad(120,120)}So in this case it would be the 0/1 node that you see on the bottom of the screen.
Dialogue: 2,0:10:18.59,0:10:26.89,720CN,,0,0,0,,{\fad(120,120)}因此，在这种情况下，将是0/1节点，会在屏幕底部看到
Dialogue: 2,0:10:26.88,0:10:31.16,720EN,,0,0,0,,{\fad(120,120)}And so I make a new copy where I've still got my monkey but I've changed the rabbit
Dialogue: 2,0:10:26.89,0:10:31.17,720CN,,0,0,0,,{\fad(120,120)}所以我创造了一个副本。里面有我的猴子，但我把
Dialogue: 2,0:10:31.16,0:10:34.16,720EN,,0,0,0,,{\fad(120,120)}to an alien.
Dialogue: 2,0:10:31.17,0:10:34.17,720CN,,0,0,0,,{\fad(120,120)}兔子换成了外星人
Dialogue: 2,0:10:34.16,0:10:39.58,720EN,,0,0,0,,{\fad(120,120)}And then I need to copy any of the intermediate nodes in the tree that were pointing to the
Dialogue: 2,0:10:34.17,0:10:39.59,720CN,,0,0,0,,{\fad(120,120)}然后我需要复制所有指向节点的中间节点
Dialogue: 2,0:10:39.59,0:10:41.11,720EN,,0,0,0,,{\fad(120,120)}node that I changed.
Dialogue: 2,0:10:39.59,0:10:41.11,720CN,,0,0,0,,{\fad(120,120)}我想要更改的节点
Dialogue: 2,0:10:41.11,0:10:46.33,720EN,,0,0,0,,{\fad(120,120)}So I basically trace a path up towards the root of the tree, which, now, I've got a new
Dialogue: 2,0:10:41.11,0:10:46.33,720CN,,0,0,0,,{\fad(120,120)}所以我基本上找到一条通往根的路径，现在，
Dialogue: 2,0:10:46.33,0:10:51.07,720EN,,0,0,0,,{\fad(120,120)}root, which means another version of the data structure.
Dialogue: 2,0:10:46.33,0:10:51.28,720CN,,0,0,0,,{\fad(120,120)}我有了新的根，表示数据的另一个版本
Dialogue: 2,0:10:51.27,0:10:57.04,720EN,,0,0,0,,{\fad(120,120)}So this technique of making this update by copying the path from the leaf I changed to
Dialogue: 2,0:10:51.28,0:10:57.05,720CN,,0,0,0,,{\fad(120,120)}因此，这种复制从我更改为的叶子到根结点的做法
Dialogue: 2,0:10:57.04,0:10:59.22,720EN,,0,0,0,,{\fad(120,120)}the root is called path copying.
Dialogue: 2,0:10:57.05,0:10:59.23,720CN,,0,0,0,,{\fad(120,120)}称为路径复制
Dialogue: 2,0:10:59.23,0:11:04.20,720EN,,0,0,0,,{\fad(120,120)}That's pretty cool because now I didn't have to copy the entire array; I just had to copy
Dialogue: 2,0:10:59.23,0:11:04.20,720CN,,0,0,0,,{\fad(120,120)}那很酷，因为现在我没有复制整个数组，我只需要复制
Dialogue: 2,0:11:04.20,0:11:10.08,720EN,,0,0,0,,{\fad(120,120)}the nodes on the way from the root to the leaf that I changed.
Dialogue: 2,0:11:04.20,0:11:10.08,720CN,,0,0,0,,{\fad(120,120)}从根到我改变的叶子之间的节点
Dialogue: 2,0:11:10.08,0:11:14.72,720EN,,0,0,0,,{\fad(120,120)}So if we've turned in something linear and copying into something logarithm.
Dialogue: 2,0:11:10.08,0:11:14.72,720CN,,0,0,0,,{\fad(120,120)}因此，时间复杂度从O(N)变成O(logN)
Dialogue: 2,0:11:14.72,0:11:19.96,720EN,,0,0,0,,{\fad(120,120)}That's pretty cool, that's more performant, and the data of this is that all of these
Dialogue: 2,0:11:14.72,0:11:20.17,720CN,,0,0,0,,{\fad(120,120)}这很酷，性能更高。数据是所有这些
Dialogue: 2,0:11:20.16,0:11:25.90,720EN,,0,0,0,,{\fad(120,120)}nodes in yellow here, so most of the tree is shared between the two versions, between
Dialogue: 2,0:11:20.17,0:11:25.91,720CN,,0,0,0,,{\fad(120,120)}节点是黄色的，所以大部分树在两个版本之间共享
Dialogue: 2,0:11:25.90,0:11:27.10,720EN,,0,0,0,,{\fad(120,120)}the old version and the new.
Dialogue: 2,0:11:25.91,0:11:27.10,720CN,,0,0,0,,{\fad(120,120)}旧版本和新版本
Dialogue: 2,0:11:27.10,0:11:32.02,720EN,,0,0,0,,{\fad(120,120)}And so this saves me a lot of space because I can actually reuse the parts of the original
Dialogue: 2,0:11:27.10,0:11:32.03,720CN,,0,0,0,,{\fad(120,120)}因此，这为我节省了很多空间，因为\N我实际上可以重用原始的部分
Dialogue: 2,0:11:32.02,0:11:36.67,720EN,,0,0,0,,{\fad(120,120)}version that didn't change, whereas, before, I had to copy those over, as well.
Dialogue: 2,0:11:32.03,0:11:36.68,720CN,,0,0,0,,{\fad(120,120)}版本没有变化，而以前我也必须复制这些内容
Dialogue: 2,0:11:36.67,0:11:41.29,720EN,,0,0,0,,{\fad(120,120)}So this means that what was before, like, a lot of memory consumption becomes a lot
Dialogue: 2,0:11:36.68,0:11:41.30,720CN,,0,0,0,,{\fad(120,120)}所以这意味着内存的消耗变小了
Dialogue: 2,0:11:41.29,0:11:46.07,720EN,,0,0,0,,{\fad(120,120)}smaller because you don't have to store as many copies of the things if they didn't change.
Dialogue: 2,0:11:41.30,0:11:46.08,720CN,,0,0,0,,{\fad(120,120)}因为你不必复制没有改变的东西
Dialogue: 2,0:11:46.08,0:11:50.46,720EN,,0,0,0,,{\fad(120,120)}And that's called structural changing because we're sharing the structure of the tree between
Dialogue: 2,0:11:46.08,0:11:50.67,720CN,,0,0,0,,{\fad(120,120)}这就是所谓的结构变更，因为我们共享树的结构
Dialogue: 2,0:11:50.66,0:11:53.37,720EN,,0,0,0,,{\fad(120,120)}the two versions.
Dialogue: 2,0:11:50.67,0:11:53.37,720CN,,0,0,0,,{\fad(120,120)}在两个版本之间
Dialogue: 2,0:11:53.37,0:11:59.69,720EN,,0,0,0,,{\fad(120,120)}So we've been talking about updating things but how do we get at the values in our data
Dialogue: 2,0:11:53.37,0:11:59.69,720CN,,0,0,0,,{\fad(120,120)}所以我们一直在谈论更新事物，但是我们如何获得数据中的值
Dialogue: 2,0:11:59.69,0:12:00.69,720EN,,0,0,0,,{\fad(120,120)}structure?
Dialogue: 2,0:12:00.69,0:12:01.69,720EN,,0,0,0,,{\fad(120,120)}How do we access them?
Dialogue: 2,0:12:00.69,0:12:01.69,720CN,,0,0,0,,{\fad(120,120)}我们如何访问它们？
Dialogue: 2,0:12:01.69,0:12:06.43,720EN,,0,0,0,,{\fad(120,120)}Well, it turns out this isn't just a tree, it's a special type of tree called a TRIE
Dialogue: 2,0:12:01.69,0:12:06.64,720CN,,0,0,0,,{\fad(120,120)}好吧，事实证明这不仅仅是树，这是一种叫做TRIE的特殊树结构
Dialogue: 2,0:12:06.63,0:12:13.04,720EN,,0,0,0,,{\fad(120,120)}tree, which originally came from the world "retrieval," so people could, I guess, call
Dialogue: 2,0:12:06.64,0:12:13.05,720CN,,0,0,0,,{\fad(120,120)}最初来自单词“检索”，所以我猜人们可以
Dialogue: 2,0:12:13.04,0:12:19.66,720EN,,0,0,0,,{\fad(120,120)}it tree, which is funny because we also call TREE trees, so we can call them "tries" if
Dialogue: 2,0:12:13.05,0:12:19.67,720CN,,0,0,0,,{\fad(120,120)}称呼它是树，为了避免混淆，我叫它TRIE（音同try）
Dialogue: 2,0:12:19.66,0:12:20.66,720EN,,0,0,0,,{\fad(120,120)}we want.
Dialogue: 2,0:12:20.66,0:12:31.72,720EN,,0,0,0,,{\fad(120,120)}So a try is a type of tree, where the leaves represent the values, and the paths to the
Dialogue: 2,0:12:20.67,0:12:31.73,720CN,,0,0,0,,{\fad(120,120)}TRIE是一种树，叶子代表值，到达叶子节点的路径
Dialogue: 2,0:12:31.73,0:12:37.27,720EN,,0,0,0,,{\fad(120,120)}value are the keys that that data is associated with.
Dialogue: 2,0:12:31.73,0:12:37.27,720CN,,0,0,0,,{\fad(120,120)}是值相关的键值
Dialogue: 2,0:12:37.27,0:12:41.62,720EN,,0,0,0,,{\fad(120,120)}So often you see TRIEs with values stored as keys.
Dialogue: 2,0:12:37.27,0:12:41.62,720CN,,0,0,0,,{\fad(120,120)}因此，TRIE经常用单词当作键
Dialogue: 2,0:12:41.62,0:12:49.46,720EN,,0,0,0,,{\fad(120,120)}So, for example, if I have T stored as a key, what I do to get to the T is I trace the tree
Dialogue: 2,0:12:41.62,0:12:49.46,720CN,,0,0,0,,{\fad(120,120)}因此，例如，如果我将tea作为键，如果要找到它，我要做的就是遍历树
Dialogue: 2,0:12:49.46,0:12:53.08,720EN,,0,0,0,,{\fad(120,120)}one letter at a time.
Dialogue: 2,0:12:49.46,0:12:53.29,720CN,,0,0,0,,{\fad(120,120)}一次一个字母
Dialogue: 2,0:12:53.28,0:12:58.87,720EN,,0,0,0,,{\fad(120,120)}Then I go to T, and then to E, and then to EA, is my key, and then my value there is
Dialogue: 2,0:12:53.29,0:12:58.88,720CN,,0,0,0,,{\fad(120,120)}然后我去T，然后去E，然后去\NEA，是我的键，然后我的值就是
Dialogue: 2,0:12:58.87,0:13:00.29,720EN,,0,0,0,,{\fad(120,120)}three.
Dialogue: 2,0:12:58.88,0:13:00.30,720CN,,0,0,0,,{\fad(120,120)}3
Dialogue: 2,0:13:00.29,0:13:05.05,720EN,,0,0,0,,{\fad(120,120)}Because everything at the end sounds like "ee" in this talk.
Dialogue: 2,0:13:00.30,0:13:05.06,720CN,,0,0,0,,{\fad(120,120)}因为在本次演讲中所有的句子都以“ ee”结尾。
Dialogue: 2,0:13:05.05,0:13:11.47,720EN,,0,0,0,,{\fad(120,120)}So this is pretty cool, but in our data structure, we weren't using words, we just wanted an
Dialogue: 2,0:13:05.06,0:13:11.48,720CN,,0,0,0,,{\fad(120,120)}所以这很酷，但是在我们的数据结构中，\N我们不会用单词作为键，我们只是想要一个
Dialogue: 2,0:13:11.48,0:13:14.83,720EN,,0,0,0,,{\fad(120,120)}array-type thing, we wanted indeces, right?
Dialogue: 2,0:13:11.48,0:13:14.83,720CN,,0,0,0,,{\fad(120,120)}数组类型的东西，我们想要索引，对吗？
Dialogue: 2,0:13:14.83,0:13:22.12,720EN,,0,0,0,,{\fad(120,120)}So the insight here is if we treat the index as a binary number, then we can pretend that
Dialogue: 2,0:13:14.83,0:13:22.13,720CN,,0,0,0,,{\fad(120,120)}所以这里的想法是如果我们把索引作为一个二进制数，那么我们可以假装
Dialogue: 2,0:13:22.12,0:13:27.63,720EN,,0,0,0,,{\fad(120,120)}that's kind of, like, our word and we can descend the tree, bit-by-bit as if each representation
Dialogue: 2,0:13:22.13,0:13:27.64,720CN,,0,0,0,,{\fad(120,120)}就像我们的单词，我们可以一位一位的逐渐查找树
Dialogue: 2,0:13:27.63,0:13:32.23,720EN,,0,0,0,,{\fad(120,120)}of our binary representation is a letter.
Dialogue: 2,0:13:27.64,0:13:32.23,720CN,,0,0,0,,{\fad(120,120)}我们的二进制表示形式是一个字母
Dialogue: 2,0:13:32.23,0:13:33.87,720EN,,0,0,0,,{\fad(120,120)}So let's see how that works.
Dialogue: 2,0:13:32.23,0:13:33.88,720CN,,0,0,0,,{\fad(120,120)}因此，让我们看看它是如何工作的。
Dialogue: 2,0:13:33.87,0:13:40.52,720EN,,0,0,0,,{\fad(120,120)}If I'm trying to get at item five in my array, so the animal at index five, I'd convert that
Dialogue: 2,0:13:33.88,0:13:40.52,720CN,,0,0,0,,{\fad(120,120)}如果我想获得数组中的第5项，因此，索引为5的动物将转换为
Dialogue: 2,0:13:40.52,0:13:46.58,720EN,,0,0,0,,{\fad(120,120)}to binary, so that's one, zero, one, and then I step through that as if it was a word.
Dialogue: 2,0:13:40.52,0:13:46.58,720CN,,0,0,0,,{\fad(120,120)}二进制，所以是1，0，1，然后我一步一步地仿佛是一个单词。
Dialogue: 2,0:13:46.58,0:13:49.85,720EN,,0,0,0,,{\fad(120,120)}I step through it letter-by-letter, bit-by-bit.
Dialogue: 2,0:13:46.58,0:13:49.85,720CN,,0,0,0,,{\fad(120,120)}我一步一步地经过每个数位
Dialogue: 2,0:13:49.85,0:13:54.00,720EN,,0,0,0,,{\fad(120,120)}So I go from the root to the branch.
Dialogue: 2,0:13:49.85,0:13:54.01,720CN,,0,0,0,,{\fad(120,120)}所以我从根到分支
Dialogue: 2,0:13:54.00,0:13:55.60,720EN,,0,0,0,,{\fad(120,120)}I have a choice of either zero or one.
Dialogue: 2,0:13:54.01,0:13:55.60,720CN,,0,0,0,,{\fad(120,120)}我可以选择0或者1
Dialogue: 2,0:13:55.60,0:13:56.85,720EN,,0,0,0,,{\fad(120,120)}I go to branch one first.
Dialogue: 2,0:13:55.60,0:13:57.06,720CN,,0,0,0,,{\fad(120,120)}我先去一个分支
Dialogue: 2,0:13:57.05,0:14:03.26,720EN,,0,0,0,,{\fad(120,120)}And then I go to branch zero, and then I take the thing on the one side.
Dialogue: 2,0:13:57.06,0:14:03.27,720CN,,0,0,0,,{\fad(120,120)}然后我去0分支，然后我去1。
Dialogue: 2,0:14:03.26,0:14:09.93,720EN,,0,0,0,,{\fad(120,120)}So I go one, zero, one, down my tree and then I end up at my frog at index five.
Dialogue: 2,0:14:03.27,0:14:09.94,720CN,,0,0,0,,{\fad(120,120)}所以我沿着树走1，0，1。我最终在索引5处找到了青蛙
Dialogue: 2,0:14:09.94,0:14:15.23,720EN,,0,0,0,,{\fad(120,120)}So this is a pretty simple insight but it ends up being incredibly powerful because
Dialogue: 2,0:14:09.94,0:14:15.23,720CN,,0,0,0,,{\fad(120,120)}所以这是一个非常简单的想法，但是最终变得非常强大，因为
Dialogue: 2,0:14:15.23,0:14:21.85,720EN,,0,0,0,,{\fad(120,120)}it allows us to quickly traverse this tree structure, which lets us use that structural
Dialogue: 2,0:14:15.23,0:14:21.85,720CN,,0,0,0,,{\fad(120,120)}它使我们能够快速遍历这棵树，让我们能够
Dialogue: 2,0:14:21.85,0:14:27.83,720EN,,0,0,0,,{\fad(120,120)}sharing to more efficiently represent our new copies of our immutable data structure.
Dialogue: 2,0:14:21.85,0:14:27.83,720CN,,0,0,0,,{\fad(120,120)}更有效的共享。使之代表我们最新的数据
Dialogue: 2,0:14:27.83,0:14:34.52,720EN,,0,0,0,,{\fad(120,120)}And, importantly, we don't have to be using a binary tree, meaning we have two branches
Dialogue: 2,0:14:27.83,0:14:34.52,720CN,,0,0,0,,{\fad(120,120)}而且，重要的是，我们不必使用一棵二叉树，意味着我们每个节点有两个分支
Dialogue: 2,0:14:34.52,0:14:37.32,720EN,,0,0,0,,{\fad(120,120)}from each node.
Dialogue: 2,0:14:37.32,0:14:42.73,720EN,,0,0,0,,{\fad(120,120)}That fits pretty well on a slide, but actually what you mostly see is a 32-way branching.
Dialogue: 2,0:14:37.32,0:14:42.73,720CN,,0,0,0,,{\fad(120,120)}二叉树非常适合幻灯片，但实际上你最常看到的是32向分支
Dialogue: 2,0:14:42.73,0:14:47.46,720EN,,0,0,0,,{\fad(120,120)}So in our trees that we've been looking at, we've kind of had one bit of information per
Dialogue: 2,0:14:42.73,0:14:47.67,720CN,,0,0,0,,{\fad(120,120)}所以看上去我们在树的每一级只有一点信息
Dialogue: 2,0:14:47.66,0:14:48.66,720EN,,0,0,0,,{\fad(120,120)}level.
Dialogue: 2,0:14:47.67,0:14:48.67,720CN,,0,0,0,,{\fad(120,120)}水平。
Dialogue: 2,0:14:48.66,0:14:55.11,720EN,,0,0,0,,{\fad(120,120)}And we've been descending bit-by-bit but if we had a 32-way branching tree, it would be
Dialogue: 2,0:14:48.67,0:14:55.11,720CN,,0,0,0,,{\fad(120,120)}而且我们一直在逐位下降，但是如果我们有一棵32向分支树
Dialogue: 2,0:14:55.11,0:14:58.62,720EN,,0,0,0,,{\fad(120,120)}five bits of information that we would be representing at each level.
Dialogue: 2,0:14:55.11,0:14:58.62,720CN,,0,0,0,,{\fad(120,120)}在每一级我们将获得的5点信息
Dialogue: 2,0:14:58.62,0:15:01.11,720EN,,0,0,0,,{\fad(120,120)}So that would look something like this.
Dialogue: 2,0:14:58.62,0:15:01.11,720CN,,0,0,0,,{\fad(120,120)}这样看起来像这样
Dialogue: 2,0:15:01.11,0:15:10.07,720EN,,0,0,0,,{\fad(120,120)}If we had a much bigger number, like, 18,977, in binary, that's that bunch of ones and zeros.
Dialogue: 2,0:15:01.11,0:15:10.07,720CN,,0,0,0,,{\fad(120,120)}如果我们有更大的数字，例如18,977，在二进制中，就是一堆0和1
Dialogue: 2,0:15:10.07,0:15:13.46,720EN,,0,0,0,,{\fad(120,120)}This would be a really deep tree if I had to descend into it one at a time, it would
Dialogue: 2,0:15:10.07,0:15:13.67,720CN,,0,0,0,,{\fad(120,120)}如果用二叉树表示，这将是一棵非常深的树
Dialogue: 2,0:15:13.66,0:15:15.34,720EN,,0,0,0,,{\fad(120,120)}be like 15 levels deep.
Dialogue: 2,0:15:13.67,0:15:15.35,720CN,,0,0,0,,{\fad(120,120)}有15层
Dialogue: 2,0:15:15.35,0:15:17.07,720EN,,0,0,0,,{\fad(120,120)}Too much, too long.
Dialogue: 2,0:15:15.35,0:15:17.07,720CN,,0,0,0,,{\fad(120,120)}太多，太久
Dialogue: 2,0:15:17.07,0:15:24.69,720EN,,0,0,0,,{\fad(120,120)}So if I'd make more branches at each level, then I can chunk this up into kind of 5-bit
Dialogue: 2,0:15:17.07,0:15:24.90,720CN,,0,0,0,,{\fad(120,120)}因此，如果我要在每个级别建立更多分支，\N我可以将其分成5位
Dialogue: 2,0:15:24.89,0:15:33.78,720EN,,0,0,0,,{\fad(120,120)}letters as it were, and descend the tree that it's now only three levels using the 32-way
Dialogue: 2,0:15:24.90,0:15:33.79,720CN,,0,0,0,,{\fad(120,120)}字母，用32路的话实际只有3层分支
Dialogue: 2,0:15:33.78,0:15:35.00,720EN,,0,0,0,,{\fad(120,120)}branching.
Dialogue: 2,0:15:35.00,0:15:40.79,720EN,,0,0,0,,{\fad(120,120)}So this is kind of a tradeoff between how deep your tree is going to be, and how big
Dialogue: 2,0:15:35.00,0:15:40.80,720CN,,0,0,0,,{\fad(120,120)}这是树的深度和广度之间的取舍
Dialogue: 2,0:15:40.79,0:15:44.92,720EN,,0,0,0,,{\fad(120,120)}the nodes are going to be because if I have just one bit of information at each level
Dialogue: 2,0:15:40.80,0:15:44.93,720CN,,0,0,0,,{\fad(120,120)}节因为如果我有每个级别只有一位信息
Dialogue: 2,0:15:44.92,0:15:46.38,720EN,,0,0,0,,{\fad(120,120)}then I have really small nodes.
Dialogue: 2,0:15:44.93,0:15:46.39,720CN,,0,0,0,,{\fad(120,120)}那我的节点很小
Dialogue: 2,0:15:46.38,0:15:50.37,720EN,,0,0,0,,{\fad(120,120)}That's quick to copy over but I have to go very, very deep down in the tree for a larger
Dialogue: 2,0:15:46.39,0:15:50.38,720CN,,0,0,0,,{\fad(120,120)}复制很快，但如果数组很大的话我的路径会很深
Dialogue: 2,0:15:50.37,0:15:51.37,720EN,,0,0,0,,{\fad(120,120)}array.
Dialogue: 2,0:15:51.37,0:15:56.98,720EN,,0,0,0,,{\fad(120,120)}And generally, research has found that 32 is a pretty good tradeoff between the depth
Dialogue: 2,0:15:51.38,0:15:56.98,720CN,,0,0,0,,{\fad(120,120)}研究发现32在深度和广度之间是一个很好的权衡
Dialogue: 2,0:15:56.98,0:15:59.21,720EN,,0,0,0,,{\fad(120,120)}of the tree.
Dialogue: 2,0:15:59.41,0:16:05.03,720EN,,0,0,0,,{\fad(120,120)}So what we've seen is a bitmap vector TRIE.
Dialogue: 2,0:15:59.42,0:16:05.04,720CN,,0,0,0,,{\fad(120,120)}因此，我们看到的是位图矢量TRIE
Dialogue: 2,0:16:05.03,0:16:08.30,720EN,,0,0,0,,{\fad(120,120)}That's just jargon.
Dialogue: 2,0:16:05.04,0:16:08.31,720CN,,0,0,0,,{\fad(120,120)}那只是行话
Dialogue: 2,0:16:08.30,0:16:09.43,720EN,,0,0,0,,{\fad(120,120)}We don't need to care about that.
Dialogue: 2,0:16:08.31,0:16:09.44,720CN,,0,0,0,,{\fad(120,120)}我们不需要关心
Dialogue: 2,0:16:09.44,0:16:13.34,720EN,,0,0,0,,{\fad(120,120)}But if you need something to Google, you can Google that.
Dialogue: 2,0:16:09.44,0:16:13.55,720CN,,0,0,0,,{\fad(120,120)}但是，如果你想Google，可以用这个关键字
Dialogue: 2,0:16:13.54,0:16:18.68,720EN,,0,0,0,,{\fad(120,120)}This is cool for array-type of things and we have an index we want to jump there, but
Dialogue: 2,0:16:13.55,0:16:18.69,720CN,,0,0,0,,{\fad(120,120)}对于数组类型的东西这很酷，因为一旦有了索引我们能跳到那儿
Dialogue: 2,0:16:18.69,0:16:19.69,720EN,,0,0,0,,{\fad(120,120)}what about objects?
Dialogue: 2,0:16:18.69,0:16:19.69,720CN,,0,0,0,,{\fad(120,120)}那对象呢？
Dialogue: 2,0:16:19.69,0:16:24.95,720EN,,0,0,0,,{\fad(120,120)}We also want to be able to associate objects with arbitrary keys, not just indeces, so
Dialogue: 2,0:16:19.69,0:16:25.15,720CN,,0,0,0,,{\fad(120,120)}我们还希望能够关联对象使用任意键，而不仅是索引
Dialogue: 2,0:16:25.15,0:16:29.79,720EN,,0,0,0,,{\fad(120,120)}we want non-integers as keys, how does that work?
Dialogue: 2,0:16:25.15,0:16:29.80,720CN,,0,0,0,,{\fad(120,120)}我们希望非整数作为键，那怎么做？
Dialogue: 2,0:16:29.79,0:16:33.25,720EN,,0,0,0,,{\fad(120,120)}So if I want a version of my data structure where it's no longer an array but it's something
Dialogue: 2,0:16:29.80,0:16:33.26,720CN,,0,0,0,,{\fad(120,120)}所以如果我想要一个数据结构的版本，它不再是数组
Dialogue: 2,0:16:33.25,0:16:38.00,720EN,,0,0,0,,{\fad(120,120)}like an object where I'm associated letters with each of my animals like M for monkey
Dialogue: 2,0:16:33.26,0:16:38.00,720CN,,0,0,0,,{\fad(120,120)}而是对象。就像我的每只动物，例如M代表猴子，
Dialogue: 2,0:16:38.00,0:16:44.51,720EN,,0,0,0,,{\fad(120,120)}and P for panda, et cetera, what I can do is I can take my keys, in this case, they're
Dialogue: 2,0:16:38.00,0:16:44.52,720CN,,0,0,0,,{\fad(120,120)}P代表熊猫，等等。我可以拿我的键-是字符串
Dialogue: 2,0:16:44.51,0:16:48.53,720EN,,0,0,0,,{\fad(120,120)}letters, and hash them to get a number that represents the key.
Dialogue: 2,0:16:44.52,0:16:48.54,720CN,,0,0,0,,{\fad(120,120)}对它们进行哈希处理以获得一个数字代表字母
Dialogue: 2,0:16:48.53,0:16:52.15,720EN,,0,0,0,,{\fad(120,120)}So that each key will have its own number.
Dialogue: 2,0:16:48.54,0:16:52.16,720CN,,0,0,0,,{\fad(120,120)}这样每个键都有自己的编号
Dialogue: 2,0:16:52.15,0:16:54.98,720EN,,0,0,0,,{\fad(120,120)}They won't be in order necessarily, but that's okay.
Dialogue: 2,0:16:52.16,0:16:54.98,720CN,,0,0,0,,{\fad(120,120)}他们不一定有序，但这没关系
Dialogue: 2,0:16:54.98,0:16:56.22,720EN,,0,0,0,,{\fad(120,120)}Objects don't have to be in order.
Dialogue: 2,0:16:54.98,0:16:56.43,720CN,,0,0,0,,{\fad(120,120)}对象属性不需要有序
Dialogue: 2,0:16:56.42,0:17:03.60,720EN,,0,0,0,,{\fad(120,120)}And then we can use the hash of that number in binary to descend the tree as before.
Dialogue: 2,0:16:56.43,0:17:03.61,720CN,,0,0,0,,{\fad(120,120)}我们可以使用该数字的哈希值用二进制表示，然后去搜索树
Dialogue: 2,0:17:03.61,0:17:10.01,720EN,,0,0,0,,{\fad(120,120)}So if I wanted to look up the value associated with key "F," I could hash F, get some number
Dialogue: 2,0:17:03.61,0:17:10.02,720CN,,0,0,0,,{\fad(120,120)}因此，如果我想查找键“ F”关联的值，我可以对F进行哈希处理，得到一些数字
Dialogue: 2,0:17:10.01,0:17:14.42,720EN,,0,0,0,,{\fad(120,120)}and let's say I get five, like, A, B, C, D, E, five.
Dialogue: 2,0:17:10.02,0:17:14.42,720CN,,0,0,0,,{\fad(120,120)}假设我有五个，例如A，B，C，D，E，五个
Dialogue: 2,0:17:14.42,0:17:19.18,720EN,,0,0,0,,{\fad(120,120)}And that would be represented in binary as one, and I descend the tree as before, here
Dialogue: 2,0:17:14.42,0:17:19.18,720CN,,0,0,0,,{\fad(120,120)}那将用二进制表示为1，我像以前一样向下搜索
Dialogue: 2,0:17:19.18,0:17:23.42,720EN,,0,0,0,,{\fad(120,120)}for simplicity, just using a one bit at a time, two-way branching tree.
Dialogue: 2,0:17:19.18,0:17:23.42,720CN,,0,0,0,,{\fad(120,120)}为了简单起见，我们使用双向分支树，每次只有一位
Dialogue: 2,0:17:23.42,0:17:28.00,720EN,,0,0,0,,{\fad(120,120)}But typically we would be doing this with 32 branches per level.
Dialogue: 2,0:17:23.42,0:17:28.00,720CN,,0,0,0,,{\fad(120,120)}但是通常我们会这样做每级32个分支
Dialogue: 2,0:17:28.00,0:17:34.81,720EN,,0,0,0,,{\fad(120,120)}So, again, we just descend the tree using the binary representation of our key, in this
Dialogue: 2,0:17:28.00,0:17:34.82,720CN,,0,0,0,,{\fad(120,120)}因此，我们根据键的二进制表示搜索树
Dialogue: 2,0:17:34.81,0:17:40.22,720EN,,0,0,0,,{\fad(120,120)}case, we used a hash function to transform it from some arbitrary object into a number
Dialogue: 2,0:17:34.82,0:17:40.22,720CN,,0,0,0,,{\fad(120,120)}这样一来，我们使用了哈希函数来把任意对象转换成一个数字
Dialogue: 2,0:17:40.22,0:17:43.80,720EN,,0,0,0,,{\fad(120,120)}and we get the animal we want -- in this case, our frog.
Dialogue: 2,0:17:40.22,0:17:43.80,720CN,,0,0,0,,{\fad(120,120)}我们得到了我们想要的动物-这里具体指我们的青蛙。
Dialogue: 2,0:17:43.80,0:17:44.80,720EN,,0,0,0,,{\fad(120,120)}Cool.
Dialogue: 2,0:17:43.80,0:17:44.80,720CN,,0,0,0,,{\fad(120,120)}酷
Dialogue: 2,0:17:44.80,0:17:51.11,720EN,,0,0,0,,{\fad(120,120)}So that, if you want to Google it, the thing you could Google is a hash array mapped TRIE.
Dialogue: 2,0:17:44.80,0:17:51.12,720CN,,0,0,0,,{\fad(120,120)}这样，如果你想搜索，可以Google“哈希数组映射TRIE”
Dialogue: 2,0:17:51.11,0:17:57.10,720EN,,0,0,0,,{\fad(120,120)}And this was a data structure parented by Phil Bagwell, and Rich Hickey, kind of started
Dialogue: 2,0:17:51.12,0:17:57.11,720CN,,0,0,0,,{\fad(120,120)}这个数据结构由菲尔·巴格韦（Phil Bagwell）和里奇·希基（Rich Hickey）发明
Dialogue: 2,0:17:57.10,0:18:03.48,720EN,,0,0,0,,{\fad(120,120)}using it, and a lot of these an implemented in languages like Clojure to implement the
Dialogue: 2,0:17:57.11,0:18:03.48,720CN,,0,0,0,,{\fad(120,120)}并使用，其中很大部分在Clojure之类的语言中已经实现了
Dialogue: 2,0:18:03.48,0:18:05.73,720EN,,0,0,0,,{\fad(120,120)}data efficiently.
Dialogue: 2,0:18:03.48,0:18:05.73,720CN,,0,0,0,,{\fad(120,120)}用来提高效率
Dialogue: 2,0:18:05.73,0:18:12.29,720EN,,0,0,0,,{\fad(120,120)}There's a ton of optimizations that are usually done on these data structures to make them
Dialogue: 2,0:18:05.73,0:18:12.30,720CN,,0,0,0,,{\fad(120,120)}通常在这些数据结构上会做很多优化
Dialogue: 2,0:18:12.29,0:18:17.54,720EN,,0,0,0,,{\fad(120,120)}super-duper fast and lots of details that we're not covering here but this is the basic
Dialogue: 2,0:18:12.30,0:18:17.55,720CN,,0,0,0,,{\fad(120,120)}使它们速度超快，还有很多细节我们不在这里介绍，但这是基本的理念
Dialogue: 2,0:18:17.54,0:18:19.11,720EN,,0,0,0,,{\fad(120,120)}idea.
Dialogue: 2,0:18:19.11,0:18:25.04,720EN,,0,0,0,,{\fad(120,120)}Trees to represent our data, structural sharing so that we can reuse as much information as
Dialogue: 2,0:18:19.12,0:18:25.05,720CN,,0,0,0,,{\fad(120,120)}用树来表示数据，结构共享。这样我们就可以重复使用尽可能多的信息
Dialogue: 2,0:18:25.04,0:18:28.97,720EN,,0,0,0,,{\fad(120,120)}possible between the old versions and the new versions.
Dialogue: 2,0:18:25.05,0:18:28.97,720CN,,0,0,0,,{\fad(120,120)}在旧版本和新版本之间
Dialogue: 2,0:18:28.97,0:18:38.25,720EN,,0,0,0,,{\fad(120,120)}And this idea of using binary representations of our keys, whether indeces, or hashed keys
Dialogue: 2,0:18:28.97,0:18:38.26,720CN,,0,0,0,,{\fad(120,120)}还有使用二进制表示我们的键，无论是索引还是被哈希处理的单词
Dialogue: 2,0:18:38.25,0:18:42.58,720EN,,0,0,0,,{\fad(120,120)}to descend the tree to find the thing we're looking for.
Dialogue: 2,0:18:38.26,0:18:42.59,720CN,,0,0,0,,{\fad(120,120)}去树中查找
Dialogue: 2,0:18:42.58,0:18:47.73,720EN,,0,0,0,,{\fad(120,120)}So to recap, mutability induces headaches.
Dialogue: 2,0:18:42.59,0:18:47.73,720CN,,0,0,0,,{\fad(120,120)}综上所述，可变性让人头疼
Dialogue: 2,0:18:47.73,0:18:52.24,720EN,,0,0,0,,{\fad(120,120)}It is to be avoided especially if you're doing functional programming where the essential
Dialogue: 2,0:18:47.73,0:18:52.24,720CN,,0,0,0,,{\fad(120,120)}做函数式编程时尤其要避免
Dialogue: 2,0:18:52.24,0:18:58.53,720EN,,0,0,0,,{\fad(120,120)}idea is to not have side effects and only be using pure functions that don't change
Dialogue: 2,0:18:52.24,0:18:58.54,720CN,,0,0,0,,{\fad(120,120)}因为函数式变成就是关于避免副作用，只使用纯函数
Dialogue: 2,0:18:58.53,0:19:03.51,720EN,,0,0,0,,{\fad(120,120)}anything except do the computation on the input and return the output.
Dialogue: 2,0:18:58.54,0:19:03.52,720CN,,0,0,0,,{\fad(120,120)}纯函数除了计算输入输出之外不改变任何东西
Dialogue: 2,0:19:03.51,0:19:07.71,720EN,,0,0,0,,{\fad(120,120)}Immutability, on the other hand, is great because if I'm using immutable data, I can't
Dialogue: 2,0:19:03.52,0:19:07.71,720CN,,0,0,0,,{\fad(120,120)}另一方面，不变性很好，因为如果我使用不可变数据
Dialogue: 2,0:19:07.71,0:19:13.99,720EN,,0,0,0,,{\fad(120,120)}mess up my co-worker's program by making the zoo she only thought was animals suddenly
Dialogue: 2,0:19:07.71,0:19:13.99,720CN,,0,0,0,,{\fad(120,120)}我就不会搞乱同事的程序，她以为只有动物的动物园里
Dialogue: 2,0:19:13.99,0:19:15.39,720EN,,0,0,0,,{\fad(120,120)}have an alien in it.
Dialogue: 2,0:19:13.99,0:19:15.39,720CN,,0,0,0,,{\fad(120,120)}里面有一个外星人
Dialogue: 2,0:19:15.39,0:19:21.40,720EN,,0,0,0,,{\fad(120,120)}But copying is a really bad way of handling data because it is not efficient neither with
Dialogue: 2,0:19:15.39,0:19:21.61,720CN,,0,0,0,,{\fad(120,120)}但是复制是一种非常糟糕的处理方式\N数据，因为它不高效
Dialogue: 2,0:19:21.60,0:19:24.09,720EN,,0,0,0,,{\fad(120,120)}respect to time, nor space.
Dialogue: 2,0:19:21.61,0:19:24.10,720CN,,0,0,0,,{\fad(120,120)}时间复杂度和空间复杂度上都是
Dialogue: 2,0:19:24.09,0:19:30.76,720EN,,0,0,0,,{\fad(120,120)}And structural sharing, using these tree structures\N-- or TRIE structures, and sharing as much
Dialogue: 2,0:19:24.10,0:19:30.77,720CN,,0,0,0,,{\fad(120,120)}结构共享，使用这些树结构-或TRIE结构，并尽可能多地共享
Dialogue: 2,0:19:30.76,0:19:35.72,720EN,,0,0,0,,{\fad(120,120)}information from one version to the next is the really performant way to do this.
Dialogue: 2,0:19:30.77,0:19:35.72,720CN,,0,0,0,,{\fad(120,120)}从一个版本到下一个版本的信息是真正有效的方法
Dialogue: 2,0:19:35.72,0:19:40.75,720EN,,0,0,0,,{\fad(120,120)}And so you're probably thinking, okay, these data structures are pretty cool.
Dialogue: 2,0:19:35.72,0:19:40.75,720CN,,0,0,0,,{\fad(120,120)}所以你可能在想，好吧，这些数据结构非常酷
Dialogue: 2,0:19:40.75,0:19:42.74,720EN,,0,0,0,,{\fad(120,120)}But what am I supposed to do with them?
Dialogue: 2,0:19:40.75,0:19:42.74,720CN,,0,0,0,,{\fad(120,120)}但是我该怎么用呢？
Dialogue: 2,0:19:42.74,0:19:47.69,720EN,,0,0,0,,{\fad(120,120)}I'm not going to be building boxes of emoji here, am I?
Dialogue: 2,0:19:42.74,0:19:47.69,720CN,,0,0,0,,{\fad(120,120)}我不会建造表情符号的盒子，不是吗
Dialogue: 2,0:19:47.69,0:19:50.27,720EN,,0,0,0,,{\fad(120,120)}No, you don't have to.
Dialogue: 2,0:19:47.69,0:19:50.28,720CN,,0,0,0,,{\fad(120,120)}不，你不必。
Dialogue: 2,0:19:50.27,0:19:55.75,720EN,,0,0,0,,{\fad(120,120)}In JavaScript, there are some really great libraries out there to help you use these
Dialogue: 2,0:19:50.28,0:19:55.76,720CN,,0,0,0,,{\fad(120,120)}在JavaScript中，有一些很棒的库可以帮助你使用这些数据结构
Dialogue: 2,0:19:55.75,0:19:57.17,720EN,,0,0,0,,{\fad(120,120)}right off the bat.
Dialogue: 2,0:19:55.76,0:19:57.17,720CN,,0,0,0,,{\fad(120,120)}马上就可以
Dialogue: 2,0:19:57.17,0:20:00.71,720EN,,0,0,0,,{\fad(120,120)}There are various solutions but I'm going to talk about a couple of them.
Dialogue: 2,0:19:57.17,0:20:00.71,720CN,,0,0,0,,{\fad(120,120)}有各种解决方案，但我要谈论其中的几个
Dialogue: 2,0:20:00.71,0:20:02.38,720EN,,0,0,0,,{\fad(120,120)}So one is called Mori.
Dialogue: 2,0:20:00.71,0:20:02.59,720CN,,0,0,0,,{\fad(120,120)}所以一个叫做Mori
Dialogue: 2,0:20:02.58,0:20:08.48,720EN,,0,0,0,,{\fad(120,120)}Mori is basically a port of Clojure script by David Nolan that allows you to leverage
Dialogue: 2,0:20:02.59,0:20:08.48,720CN,,0,0,0,,{\fad(120,120)}Mori基本上是ClojureScript的移植，作者是大卫·诺兰（David Nolan）
Dialogue: 2,0:20:08.48,0:20:13.82,720EN,,0,0,0,,{\fad(120,120)}the implementations of these data structures from ClojureScript, which is the version of
Dialogue: 2,0:20:08.48,0:20:13.83,720CN,,0,0,0,,{\fad(120,120)}这些数据结构的实现来自ClojureScript
Dialogue: 2,0:20:13.82,0:20:21.12,720EN,,0,0,0,,{\fad(120,120)}Clojure which targets JavaScript from the comfort of your vanilla JavaScript.
Dialogue: 2,0:20:13.83,0:20:21.13,720CN,,0,0,0,,{\fad(120,120)}ClojureScript把Clojure编译成原生JavaScript
Dialogue: 2,0:20:21.13,0:20:23.56,720EN,,0,0,0,,{\fad(120,120)}And it's got a bit more of a Clojure feel to it.
Dialogue: 2,0:20:21.13,0:20:23.77,720CN,,0,0,0,,{\fad(120,120)}而且还有Clojure的感觉
Dialogue: 2,0:20:23.76,0:20:26.75,720EN,,0,0,0,,{\fad(120,120)}A bit more of a functional language feel.
Dialogue: 2,0:20:23.77,0:20:26.76,720CN,,0,0,0,,{\fad(120,120)}有点函数式语言的感觉
Dialogue: 2,0:20:26.75,0:20:30.49,720EN,,0,0,0,,{\fad(120,120)}The API is functional and we're going to see what that looks like in a moment.
Dialogue: 2,0:20:26.76,0:20:30.49,720CN,,0,0,0,,{\fad(120,120)}它的API是函数式的，我们即将看到
Dialogue: 2,0:20:30.49,0:20:32.83,720EN,,0,0,0,,{\fad(120,120)}But that's one thing that kind of sets this library apart.
Dialogue: 2,0:20:30.49,0:20:32.84,720CN,,0,0,0,,{\fad(120,120)}但这把它和其他的库区分开
Dialogue: 2,0:20:32.83,0:20:36.86,720EN,,0,0,0,,{\fad(120,120)}On the other hand, there's also Immutable.js.
Dialogue: 2,0:20:32.84,0:20:36.87,720CN,,0,0,0,,{\fad(120,120)}另一方面，还有Immutable.js。
Dialogue: 2,0:20:36.86,0:20:38.92,720EN,,0,0,0,,{\fad(120,120)}This is a library put out by Facebook.
Dialogue: 2,0:20:36.87,0:20:38.92,720CN,,0,0,0,,{\fad(120,120)}这是Facebook推出的
Dialogue: 2,0:20:38.92,0:20:41.40,720EN,,0,0,0,,{\fad(120,120)}It was created by Lee Byron.
Dialogue: 2,0:20:38.92,0:20:41.61,720CN,,0,0,0,,{\fad(120,120)}它是由李·拜伦（Lee Byron）创建的
Dialogue: 2,0:20:41.60,0:20:45.44,720EN,,0,0,0,,{\fad(120,120)}And this is a JavaScript implementation of these data structures.
Dialogue: 2,0:20:41.61,0:20:45.45,720CN,,0,0,0,,{\fad(120,120)}这是一个JavaScript实现的数据结构
Dialogue: 2,0:20:45.45,0:20:48.38,720EN,,0,0,0,,{\fad(120,120)}So it has a bit more of that native JavaScript feel to it.
Dialogue: 2,0:20:45.45,0:20:48.59,720CN,,0,0,0,,{\fad(120,120)}因此，它具有更多的原生JavaScript的感觉
Dialogue: 2,0:20:48.58,0:20:52.22,720EN,,0,0,0,,{\fad(120,120)}It doesn't have kind of the Clojure background brought in.
Dialogue: 2,0:20:48.59,0:20:52.22,720CN,,0,0,0,,{\fad(120,120)}它没有Clojure背景
Dialogue: 2,0:20:52.22,0:20:57.77,720EN,,0,0,0,,{\fad(120,120)}And that means it's got a more object-oriented style API, although it is still returning
Dialogue: 2,0:20:52.22,0:20:57.78,720CN,,0,0,0,,{\fad(120,120)}这意味着它具有更多的面向对象样式的API，尽管它仍在返回
Dialogue: 2,0:20:57.77,0:21:05.91,720EN,,0,0,0,,{\fad(120,120)}new versions of data structures instead of changing mutable structures in place.
Dialogue: 2,0:20:57.78,0:21:05.91,720CN,,0,0,0,,{\fad(120,120)}新版本的数据结构，而不是原位改变数据
Dialogue: 2,0:21:05.91,0:21:08.04,720EN,,0,0,0,,{\fad(120,120)}So let's see what those look like.
Dialogue: 2,0:21:05.91,0:21:08.04,720CN,,0,0,0,,{\fad(120,120)}因此，让我们看看它们的用法
Dialogue: 2,0:21:08.04,0:21:10.64,720EN,,0,0,0,,{\fad(120,120)}This is how you might use Mori to create what's called a vector.
Dialogue: 2,0:21:08.04,0:21:10.64,720CN,,0,0,0,,{\fad(120,120)}这就是使用Mori来创建向量
Dialogue: 2,0:21:10.64,0:21:18.62,720EN,,0,0,0,,{\fad(120,120)}A vector is the data structure from Mori that you'd probably be using as an array-type thing.
Dialogue: 2,0:21:10.64,0:21:18.83,720CN,,0,0,0,,{\fad(120,120)}向量是Mori的数据结构，你可能当成数组类型去用。
Dialogue: 2,0:21:18.82,0:21:22.69,720EN,,0,0,0,,{\fad(120,120)}So I've got a vector that I'm calling A because it's sort of array-ish.
Dialogue: 2,0:21:18.83,0:21:22.70,720CN,,0,0,0,,{\fad(120,120)}所以我有一个向量，我称之为a，因为这有点像数组。
Dialogue: 2,0:21:22.70,0:21:25.95,720EN,,0,0,0,,{\fad(120,120)}It's got one and two in it.
Dialogue: 2,0:21:22.70,0:21:25.95,720CN,,0,0,0,,{\fad(120,120)}它里面有1和2。
Dialogue: 2,0:21:25.95,0:21:31.04,720EN,,0,0,0,,{\fad(120,120)}And if I want to push something onto that, the function that I'd use is conj.
Dialogue: 2,0:21:25.95,0:21:31.05,720CN,,0,0,0,,{\fad(120,120)}如果我想在里面添加，我要使用的函数是conj
Dialogue: 2,0:21:31.04,0:21:34.64,720EN,,0,0,0,,{\fad(120,120)}This is from the Clojure called, Lisp-speak.
Dialogue: 2,0:21:31.05,0:21:34.65,720CN,,0,0,0,,{\fad(120,120)}这是来自Clojure世界的Lisp语言
Dialogue: 2,0:21:34.65,0:21:42.89,720EN,,0,0,0,,{\fad(120,120)}And what I would put in is the original A, and then what I want, which is, in this case
Dialogue: 2,0:21:34.65,0:21:42.89,720CN,,0,0,0,,{\fad(120,120)}我要添加到A中，然后我想要的是添加3
Dialogue: 2,0:21:42.89,0:21:43.88,720EN,,0,0,0,,{\fad(120,120)}three.
Dialogue: 2,0:21:44.08,0:21:47.59,720EN,,0,0,0,,{\fad(120,120)}And you'll see that this creates this new structure on the right.
Dialogue: 2,0:21:44.09,0:21:47.60,720CN,,0,0,0,,{\fad(120,120)}你会看到右边，这创建了新的数据
Dialogue: 2,0:21:47.59,0:21:56.16,720EN,,0,0,0,,{\fad(120,120)}These vector, one, two, and one, two, three, they look different because they're not really
Dialogue: 2,0:21:47.60,0:21:56.17,720CN,,0,0,0,,{\fad(120,120)}这些向量[1 2]和[1 2 3]，它们看起来和JavaScript的数组不太一样，因为它们不是真的
Dialogue: 2,0:21:56.17,0:22:00.04,720EN,,0,0,0,,{\fad(120,120)}JavaScript arrays although you can convert back and forth.
Dialogue: 2,0:21:56.17,0:22:00.04,720CN,,0,0,0,,{\fad(120,120)}JavaScript数组，它们是向量，虽然可以互相转换
Dialogue: 2,0:22:00.04,0:22:07.20,720EN,,0,0,0,,{\fad(120,120)}But the point is this cong function returns a new value which I can catch as A2 and I
Dialogue: 2,0:22:00.04,0:22:07.20,720CN,,0,0,0,,{\fad(120,120)}但是重点是这个conj函数返回新的值a2
Dialogue: 2,0:22:07.20,0:22:11.65,720EN,,0,0,0,,{\fad(120,120)}can prove to myself that my original A didn't change by using the count function to see
Dialogue: 2,0:22:07.20,0:22:11.86,720CN,,0,0,0,,{\fad(120,120)}我能证明我原来的a没有改变，通过使用count函数
Dialogue: 2,0:22:11.85,0:22:12.85,720EN,,0,0,0,,{\fad(120,120)}how many things are in it.
Dialogue: 2,0:22:11.86,0:22:12.86,720CN,,0,0,0,,{\fad(120,120)}看里面有几个成员
Dialogue: 2,0:22:12.85,0:22:15.13,720EN,,0,0,0,,{\fad(120,120)}And there's only two things in it.
Dialogue: 2,0:22:12.86,0:22:15.14,720CN,,0,0,0,,{\fad(120,120)}而且其中只有两个
Dialogue: 2,0:22:15.14,0:22:20.87,720EN,,0,0,0,,{\fad(120,120)}But I can prove that my version, A2, has the third thing by trying to access, by using
Dialogue: 2,0:22:15.14,0:22:21.08,720CN,,0,0,0,,{\fad(120,120)}但是我可以证明我的版本a2有第三个成员，通过使用
Dialogue: 2,0:22:21.07,0:22:26.93,720EN,,0,0,0,,{\fad(120,120)}the get function to trying to get two, which it tells me, it is indeed three.
Dialogue: 2,0:22:21.08,0:22:26.94,720CN,,0,0,0,,{\fad(120,120)}get函数来获取get(a2, 2)，它告诉我，确实是3
Dialogue: 2,0:22:26.94,0:22:32.14,720EN,,0,0,0,,{\fad(120,120)}This is the same thing that you would use in Immutable.js.
Dialogue: 2,0:22:26.94,0:22:32.35,720CN,,0,0,0,,{\fad(120,120)}在Immutable.js中也一样
Dialogue: 2,0:22:32.34,0:22:38.88,720EN,,0,0,0,,{\fad(120,120)}Here you would use Immutable.js.list.of, that's interesting syntax.
Dialogue: 2,0:22:32.35,0:22:38.89,720CN,,0,0,0,,{\fad(120,120)}这里使用Immutable.js的list.of，有趣的语法
Dialogue: 2,0:22:38.89,0:22:43.39,720EN,,0,0,0,,{\fad(120,120)}But it creates something more like a JavaScript array.
Dialogue: 2,0:22:38.89,0:22:43.60,720CN,,0,0,0,,{\fad(120,120)}但是它创建了更像JavaScript的数组
Dialogue: 2,0:22:43.59,0:22:49.89,720EN,,0,0,0,,{\fad(120,120)}Although it is not an array, it is a JS list.
Dialogue: 2,0:22:43.60,0:22:49.90,720CN,,0,0,0,,{\fad(120,120)}尽管它不是数组，但它是一个JS列表
Dialogue: 2,0:22:49.90,0:22:56.67,720EN,,0,0,0,,{\fad(120,120)}That I'll call an array and if I want to add something onto a new version of A, I use this
Dialogue: 2,0:22:49.90,0:22:56.67,720CN,,0,0,0,,{\fad(120,120)}我把那叫做a，如果我想添加一些东西在a的新版本中
Dialogue: 2,0:22:56.67,0:22:59.41,720EN,,0,0,0,,{\fad(120,120)}sort of dot-method notation that we're used to.
Dialogue: 2,0:22:56.67,0:22:59.62,720CN,,0,0,0,,{\fad(120,120)}我们使用点方法，这种方法我们很熟悉
Dialogue: 2,0:22:59.61,0:23:03.29,720EN,,0,0,0,,{\fad(120,120)}I'd say a.push(3), but, importantly, this is not changing a.
Dialogue: 2,0:22:59.62,0:23:03.29,720CN,,0,0,0,,{\fad(120,120)}我会说a.push(3)，但重要的是，a没有改变
Dialogue: 2,0:23:03.29,0:23:13.04,720EN,,0,0,0,,{\fad(120,120)}It's just returning a new value of a, which I'm going to capture as a2 and I can prove
Dialogue: 2,0:23:03.29,0:23:13.04,720CN,,0,0,0,,{\fad(120,120)}它只是返回a的新值，我赋值给a2，我可以证明
Dialogue: 2,0:23:13.04,0:23:14.55,720EN,,0,0,0,,{\fad(120,120)}to myself that it didn't change.
Dialogue: 2,0:23:13.04,0:23:14.55,720CN,,0,0,0,,{\fad(120,120)}它没有改变
Dialogue: 2,0:23:14.55,0:23:22.34,720EN,,0,0,0,,{\fad(120,120)}A.size tells me it's two, and if I try to get the item at index two, I find that it's
Dialogue: 2,0:23:14.55,0:23:22.35,720CN,,0,0,0,,{\fad(120,120)}a.size告诉我是两个，如果我尝试\N得到索引2的成员，我发现它是3
Dialogue: 2,0:23:22.34,0:23:26.38,720EN,,0,0,0,,{\fad(120,120)}three, as I expected.
Dialogue: 2,0:23:22.35,0:23:26.39,720CN,,0,0,0,,{\fad(120,120)}正如我所料。
Dialogue: 2,0:23:26.39,0:23:33.67,720EN,,0,0,0,,{\fad(120,120)}So, similarly, for what are called maps, which is kind of the key-value object that we might
Dialogue: 2,0:23:26.39,0:23:33.67,720CN,,0,0,0,,{\fad(120,120)}因此，类似地，说到map，是我们可能会想到的键值对象
Dialogue: 2,0:23:33.67,0:23:39.47,720EN,,0,0,0,,{\fad(120,120)}be using, if I create an object, o, which is going to be my Mori hashmap data structure
Dialogue: 2,0:23:33.67,0:23:39.47,720CN,,0,0,0,,{\fad(120,120)}如果我创建一个对象，o，Mori的哈希表数据结构，
Dialogue: 2,0:23:39.47,0:23:45.23,720EN,,0,0,0,,{\fad(120,120)}I'm associating a is one, b with two, again, we see that the syntax is a little different
Dialogue: 2,0:23:39.47,0:23:45.23,720CN,,0,0,0,,{\fad(120,120)}我将a赋值1，将b赋值2，我们看到语法有点不同
Dialogue: 2,0:23:45.23,0:23:48.41,720EN,,0,0,0,,{\fad(120,120)}from our regular JavaScript beastlier not regular JavaScript objects.
Dialogue: 2,0:23:45.23,0:23:48.62,720CN,,0,0,0,,{\fad(120,120)}不是我们的常规JavaScript语法，因为它不是JavaScript对象。
Dialogue: 2,0:23:48.61,0:23:52.25,720EN,,0,0,0,,{\fad(120,120)}They're super special immutable data structures, they need special syntax.
Dialogue: 2,0:23:48.62,0:23:52.25,720CN,,0,0,0,,{\fad(120,120)}它们是超特殊的不可变数据结构，他们需要特殊的语法
Dialogue: 2,0:23:52.25,0:24:01.86,720EN,,0,0,0,,{\fad(120,120)}And so if I want to change the value of one of my keys, I can use this asoc function
Dialogue: 2,0:23:52.25,0:24:01.87,720CN,,0,0,0,,{\fad(120,120)}因此，如果我想更改一个键的值，我可以使用这个assoc函数
Dialogue: 2,0:24:01.86,0:24:06.83,720EN,,0,0,0,,{\fad(120,120)}and then change the value of three in my new version, o2, and then I can prove to myself
Dialogue: 2,0:24:01.87,0:24:06.84,720CN,,0,0,0,,{\fad(120,120)}然后在o2中改变a的值为3，然后我可以证明
Dialogue: 2,0:24:06.83,0:24:12.19,720EN,,0,0,0,,{\fad(120,120)}that the original didn't change by using the get function to make sure that a in the original
Dialogue: 2,0:24:06.84,0:24:12.20,720CN,,0,0,0,,{\fad(120,120)}原来的值没有改变，通过get函数得到键a的值
Dialogue: 2,0:24:12.20,0:24:18.31,720EN,,0,0,0,,{\fad(120,120)}one -- o, is one, and the a in o2 is three, as I would expect.
Dialogue: 2,0:24:12.20,0:24:18.32,720CN,,0,0,0,,{\fad(120,120)}在o中a是1，而o2中的a是3，正如我所期望的
Dialogue: 2,0:24:18.31,0:24:23.49,720EN,,0,0,0,,{\fad(120,120)}And it looks quite similar in Immutable.js except the structure is called map, not hashmap
Dialogue: 2,0:24:18.32,0:24:23.49,720CN,,0,0,0,,{\fad(120,120)}在Immutable.js中看起来非常相似，除了结构称为map而不是hashmap之外
Dialogue: 2,0:24:23.49,0:24:31.19,720EN,,0,0,0,,{\fad(120,120)}and I can pass in a little JavaScript object, and it gives me a little o, a little more
Dialogue: 2,0:24:23.49,0:24:31.19,720CN,,0,0,0,,{\fad(120,120)}我可以传入一个JavaScript对象，它返回o，它看上去
Dialogue: 2,0:24:31.19,0:24:33.19,720EN,,0,0,0,,{\fad(120,120)}JavaScript syntax than we're used to.
Dialogue: 2,0:24:31.19,0:24:33.19,720CN,,0,0,0,,{\fad(120,120)}更像我们熟悉的JavaScript的语法
Dialogue: 2,0:24:33.19,0:24:39.23,720EN,,0,0,0,,{\fad(120,120)}This has a bit more of a syntax and feel that you might be used to from JavaScript programming
Dialogue: 2,0:24:33.19,0:24:39.23,720CN,,0,0,0,,{\fad(120,120)}我们可能已经习惯了JavaScript编程
Dialogue: 2,0:24:39.23,0:24:45.32,720EN,,0,0,0,,{\fad(120,120)}I can use the set method on o to create a new version where a is now three, and I can
Dialogue: 2,0:24:39.23,0:24:45.33,720CN,,0,0,0,,{\fad(120,120)}我可以在o上使用set方法来创建一个新版本，其中a现在是3
Dialogue: 2,0:24:45.32,0:24:50.86,720EN,,0,0,0,,{\fad(120,120)}use the get methods on my old version o, and my new-version o2 to prove to myself that
Dialogue: 2,0:24:45.33,0:24:50.87,720CN,,0,0,0,,{\fad(120,120)}我可以在我的旧版本o上使用get方法，我得到的o2可以证明
Dialogue: 2,0:24:50.86,0:24:52.71,720EN,,0,0,0,,{\fad(120,120)}the old one didn't change.
Dialogue: 2,0:24:50.87,0:24:52.72,720CN,,0,0,0,,{\fad(120,120)}旧的值没有改变
Dialogue: 2,0:24:52.72,0:24:55.15,720EN,,0,0,0,,{\fad(120,120)}So these are really immutable data structures.
Dialogue: 2,0:24:52.72,0:24:55.15,720CN,,0,0,0,,{\fad(120,120)}因此，这些实际上是不可变的数据结构
Dialogue: 2,0:24:55.15,0:25:01.82,720EN,,0,0,0,,{\fad(120,120)}They look really weird if you try to look at them in the console just as JavaScript
Dialogue: 2,0:24:55.15,0:25:02.03,720CN,,0,0,0,,{\fad(120,120)}如果你试着在控制台中，把这些数据结构作为JavaScript对象那样去查看，看起来很奇怪
Dialogue: 2,0:25:02.02,0:25:03.02,720EN,,0,0,0,,{\fad(120,120)}objects.
Dialogue: 2,0:25:03.02,0:25:06.02,720EN,,0,0,0,,{\fad(120,120)}They're really fun to kind of poke down into because they have this complicated tree structure.
Dialogue: 2,0:25:03.03,0:25:06.03,720CN,,0,0,0,,{\fad(120,120)}查看它们的这种复杂的树结构很有意思
Dialogue: 2,0:25:06.02,0:25:09.64,720EN,,0,0,0,,{\fad(120,120)}So I highly recommend that you try out these libraries and see what works for you.
Dialogue: 2,0:25:06.03,0:25:09.65,720CN,,0,0,0,,{\fad(120,120)}因此，我强烈建议你尝试这些库，看看有什么适合你
Dialogue: 2,0:25:09.65,0:25:15.13,720EN,,0,0,0,,{\fad(120,120)}I can tell you really just briefly before I run out of time here, that how they compare
Dialogue: 2,0:25:09.65,0:25:15.34,720CN,,0,0,0,,{\fad(120,120)}我可以很简单地告诉你，因为我快没时间了，他们的区别
Dialogue: 2,0:25:15.33,0:25:22.82,720EN,,0,0,0,,{\fad(120,120)}is basically, again, Mori is from the Clojure world, it's ClojureScript.
Dialogue: 2,0:25:15.34,0:25:22.83,720CN,,0,0,0,,{\fad(120,120)}基本上，Mori也是来自Clojure世界，这是ClojureScript
Dialogue: 2,0:25:22.82,0:25:32.36,720EN,,0,0,0,,{\fad(120,120)}But the Immutable.js has more of the o.get() kind of feel to it, if you're comfortable
Dialogue: 2,0:25:22.83,0:25:32.37,720CN,,0,0,0,,{\fad(120,120)}但是Immutable.js具有更多的类似o.get()的API
Dialogue: 2,0:25:32.36,0:25:34.42,720EN,,0,0,0,,{\fad(120,120)}writing JavaScript like that.
Dialogue: 2,0:25:32.37,0:25:34.42,720CN,,0,0,0,,{\fad(120,120)}如果你已经习惯JavaScript语法，会觉得很顺手
Dialogue: 2,0:25:34.42,0:25:39.24,720EN,,0,0,0,,{\fad(120,120)}However, for me, it gives me a little bit of a cognitive dissonance there because it
Dialogue: 2,0:25:34.42,0:25:39.24,720CN,,0,0,0,,{\fad(120,120)}但是，对我来说，我有一点认知失调是因为
Dialogue: 2,0:25:39.24,0:25:46.22,720EN,,0,0,0,,{\fad(120,120)}looks like we're mutating things with those calls -- we're not -- but for me, to get more
Dialogue: 2,0:25:39.24,0:25:46.22,720CN,,0,0,0,,{\fad(120,120)}看起来我们正在改变数据。我们不是-但是对我来说
Dialogue: 2,0:25:46.22,0:25:50.88,720EN,,0,0,0,,{\fad(120,120)}into the mindset of functional programming, I prefer the functional programming of Mori
Dialogue: 2,0:25:46.22,0:25:50.88,720CN,,0,0,0,,{\fad(120,120)}为了获得更多函数式编程的思维方式，我更喜欢Mori的函数式编程
Dialogue: 2,0:25:50.88,0:25:59.16,720EN,,0,0,0,,{\fad(120,120)}because it gets to the way that we conceive things as inputs and not just outs.
Dialogue: 2,0:25:50.88,0:25:59.16,720CN,,0,0,0,,{\fad(120,120)}因为它提供了一种想法数据不只是输出，也是输入
Dialogue: 2,0:25:59.16,0:26:05.04,720EN,,0,0,0,,{\fad(120,120)}We don't want to be in the mindset of making changes in place to objects.
Dialogue: 2,0:25:59.16,0:26:05.04,720CN,,0,0,0,,{\fad(120,120)}我们不想成为原地修改对象
Dialogue: 2,0:26:05.04,0:26:10.00,720EN,,0,0,0,,{\fad(120,120)}There's also some minor performance differences between the two, Mori is a bit faster, and
Dialogue: 2,0:26:05.04,0:26:10.00,720CN,,0,0,0,,{\fad(120,120)}两者之间也有一些小的性能差异，Mori的速度更快
Dialogue: 2,0:26:10.00,0:26:11.56,720EN,,0,0,0,,{\fad(120,120)}Immutable.js is a bit smaller.
Dialogue: 2,0:26:10.00,0:26:11.57,720CN,,0,0,0,,{\fad(120,120)}但是Immutable.js体积较小
Dialogue: 2,0:26:11.56,0:26:16.08,720EN,,0,0,0,,{\fad(120,120)}But they're both great options, try them out, and I hope one of them works for you.
Dialogue: 2,0:26:11.57,0:26:16.09,720CN,,0,0,0,,{\fad(120,120)}但是它们都是不错的选择，尝试一下，我希望你能用上
Dialogue: 2,0:26:16.08,0:26:18.14,720EN,,0,0,0,,{\fad(120,120)}So that's my talk.
Dialogue: 2,0:26:16.09,0:26:18.15,720CN,,0,0,0,,{\fad(120,120)}这就是我的演讲
Dialogue: 2,0:26:18.15,0:26:19.65,720EN,,0,0,0,,{\fad(120,120)}I hope it's been useful.
Dialogue: 2,0:26:18.15,0:26:19.65,720CN,,0,0,0,,{\fad(120,120)}我希望它会有用
Dialogue: 2,0:26:19.65,0:26:23.23,720EN,,0,0,0,,{\fad(120,120)}Go forth and don't mutate your data!
Dialogue: 2,0:26:19.65,0:26:23.23,720CN,,0,0,0,,{\fad(120,120)}继续，不要改变你的数据
Dialogue: 2,0:26:23.23,0:26:24.34,720CN,,0,0,0,,{\fad(120,120)}这里有一些参考资料，谢谢
Dialogue: 2,0:26:23.23,0:26:28.23,720EN,,0,0,0,,{\fad(120,120)}Here's some references for you.