[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]
Automation Scripts: ~../StyleSplitChan.lua
Scroll Position: 62

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: 720CN,Arial Unicode MS,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,134
Style: 720EN,Arial Hebrew,40,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 1,0:00:00.58,0:00:04.14,720CN,,0,0,0,,Deno一种全新的编写服务器端JavaScript的方式
Dialogue: 2,0:00:00.58,0:00:04.14,720EN,,0,0,0,,Deno a brand new way to write server-side JavaScript
Dialogue: 1,0:00:04.14,0:00:08.12,720CN,,0,0,0,,它解决了许多nodejs的问题，他们甚至是同一个家伙创建的
Dialogue: 2,0:00:04.14,0:00:08.12,720EN,,0,0,0,,it solves many of the same problems as Nodejs and was even created by the same guy
Dialogue: 1,0:00:08.12,0:00:10.87,720CN,,0,0,0,,Deno使用v8 JavaScript引擎
Dialogue: 2,0:00:08.12,0:00:10.87,720EN,,0,0,0,,like node it uses the v8 JavaScript engine under the hood
Dialogue: 1,0:00:10.87,0:00:14.32,720CN,,0,0,0,,但其余部分是Rust和Typescript开发的
Dialogue: 2,0:00:10.87,0:00:14.32,720EN,,0,0,0,,but the rest of the runtime is implemented in rust and typescript
Dialogue: 1,0:00:14.32,0:00:17.12,720CN,,0,0,0,,我们探索Deno的旅程始于一个TypeScript文件
Dialogue: 2,0:00:14.32,0:00:17.12,720EN,,0,0,0,,our journey into Deno land begins in a single TypeScript file
Dialogue: 1,0:00:17.12,0:00:20.26,720CN,,0,0,0,,在这个文件中 我们可以访问运行时的所有类型
Dialogue: 2,0:00:17.12,0:00:20.26,720EN,,0,0,0,,in this file we have access to all the types in the
Dialogue: 1,0:00:20.26,0:00:22.74,720CN,,0,0,0,,这意味着我们可以编写强类型代码
Dialogue: 2,0:00:20.26,0:00:22.74,720EN,,0,0,0,,runtime which means we can write strongly typed code
Dialogue: 1,0:00:22.74,0:00:27.03,720CN,,0,0,0,,并在IDE中查看文档和使用intellisense 无需配置
Dialogue: 2,0:00:22.74,0:00:27.03,720EN,,0,0,0,,and get documentation and intellisense directly in the IDE without ever needing to touch a TS config file.
Dialogue: 1,0:00:27.87,0:00:31.15,720CN,,0,0,0,,运行时的功能可以从Deno的命名空间中得到
Dialogue: 2,0:00:27.87,0:00:31.15,720EN,,0,0,0,,the features in the runtime can be accessed from this Deno namespace
Dialogue: 1,0:00:31.46,0:00:34.14,720CN,,0,0,0,,让我们打印一下当前工作目录
Dialogue: 2,0:00:31.46,0:00:34.14,720EN,,0,0,0,,let's console.log the current working directory of the filesystem
Dialogue: 1,0:00:34.35,0:00:37.07,720CN,,0,0,0,,可以从命令行运行脚本
Dialogue: 2,0:00:34.35,0:00:37.07,720EN,,0,0,0,,we can execute our script with Deno run from the command line
Dialogue: 1,0:00:37.37,0:00:40.92,720CN,,0,0,0,,但是你会注意到出错，这是因为默认情况下Deno安全的，
Dialogue: 2,0:00:37.37,0:00:40.92,720EN,,0,0,0,,but you'll notice the throws an error and that's because Deno is secure by default
Dialogue: 1,0:00:41.12,0:00:44.69,720CN,,0,0,0,,开发人员需要授予运行时执行不同操作的权限
Dialogue: 2,0:00:41.12,0:00:44.69,720EN,,0,0,0,,you the developer need to give permission to perform different actions in the runtime
Dialogue: 1,0:00:44.92,0:00:49.00,720CN,,0,0,0,,这种情况 我们可以使用allow read标志来允许此操作
Dialogue: 2,0:00:44.92,0:00:49.00,720EN,,0,0,0,,in this case we can use the allow read flag to allow this operation
Dialogue: 1,0:00:49.20,0:00:52.88,720CN,,0,0,0,,安全性很棒，但是我最喜欢的是 Deno的异步都是基于Promise的
Dialogue: 2,0:00:49.20,0:00:52.88,720EN,,0,0,0,,security is great but my favorite thing is how everything asynchronous is promise based
Dialogue: 1,0:00:52.88,0:00:56.99,720CN,,0,0,0,,我们可以使用fetch API发出网络请求，就像在浏览器中一样
Dialogue: 2,0:00:52.88,0:00:56.99,720EN,,0,0,0,,we can make a network request using the fetch API just like we would in the browser
Dialogue: 1,0:00:56.99,0:01:00.62,720CN,,0,0,0,,并且因为它支持顶层的await，我们甚至不需要async函数
Dialogue: 2,0:00:56.99,0:01:00.62,720EN,,0,0,0,,and because it supports top-level wait we don't even need an async function
Dialogue: 1,0:01:00.62,0:01:03.88,720CN,,0,0,0,,我们可以决议promise，而无需任何模版代码
Dialogue: 2,0:01:00.62,0:01:03.88,720EN,,0,0,0,,here we can start resolving promises without any extra
Dialogue: 1,0:01:03.88,0:01:06.76,720CN,,0,0,0,,Deno尝试使你的代码和浏览器兼容
Dialogue: 2,0:01:03.88,0:01:06.76,720EN,,0,0,0,,boilerplate code Deno attempts to make your code as browser compatible as possible
Dialogue: 1,0:01:06.76,0:01:09.99,720CN,,0,0,0,,它包含一个window对象 你可以监听它的生命周期事件
Dialogue: 2,0:01:06.76,0:01:09.99,720EN,,0,0,0,,it contains a window object with lifecycle events that you can listen to
Dialogue: 1,0:01:09.99,0:01:14.67,720CN,,0,0,0,,开发人员可以更轻松地编写在服务器和浏览器中可中断的代码
Dialogue: 2,0:01:09.99,0:01:14.67,720EN,,0,0,0,,allowing developers to more easily write code that can interrupt between browsers and servers
Dialogue: 1,0:01:14.67,0:01:17.80,720CN,,0,0,0,,更不用说它也可以执行Web Assembly二进制文件
Dialogue: 2,0:01:14.67,0:01:17.80,720EN,,0,0,0,,not to mention it can also execute web assembly binaries
Dialogue: 1,0:01:17.80,0:01:20.82,720CN,,0,0,0,,Deno中不支持一件事是NPM
Dialogue: 2,0:01:17.80,0:01:20.82,720EN,,0,0,0,,but one thing that won't work in Deno are your NPM packages instead
Dialogue: 1,0:01:21.03,0:01:26.75,720CN,,0,0,0,,取而代之 你使用模块语法通过url来引用模块
Dialogue: 2,0:01:21.03,0:01:26.75,720EN,,0,0,0,,you import packages using the module yes module syntax with remote modules being referenced by their URL
Dialogue: 1,0:01:26.75,0:01:28.59,720CN,,0,0,0,,当你首次运行时
Dialogue: 2,0:01:26.75,0:01:28.59,720EN,,0,0,0,,when you run your script for the first time it will
Dialogue: 1,0:01:28.79,0:01:32.25,720CN,,0,0,0,,在本地下载此代码并缓存 没有package.json 可以通过url引用任何你想要的代码
Dialogue: 2,0:01:28.79,0:01:32.25,720EN,,0,0,0,,download this code locally and cache it there's no package JSON and code can be
Dialogue: 1,0:01:32.45,0:01:36.12,720CN,,0,0,0,,非常类似于浏览器的引用文件的方式
Dialogue: 2,0:01:32.45,0:01:36.12,720EN,,0,0,0,,referenced from any URL very similar to how things work in the browser
Dialogue: 1,0:01:36.32,0:01:39.90,720CN,,0,0,0,,Deno提供了一组标准模块来解决常见的用例
Dialogue: 2,0:01:36.32,0:01:39.90,720EN,,0,0,0,,Deno provides a set of standard modules to solve common use cases for example we
Dialogue: 1,0:01:40.10,0:01:43.92,720CN,,0,0,0,,例如我们可以从http模块导入服务，我们可以使用它来创建服务器
Dialogue: 2,0:01:40.10,0:01:43.92,720EN,,0,0,0,,can import serve from the HTTP module we can use it to create a server that's
Dialogue: 1,0:01:44.12,0:01:47.89,720CN,,0,0,0,,服务器被视为异步可迭代，然后我们可以等待每个请求，
Dialogue: 2,0:01:44.12,0:01:47.89,720EN,,0,0,0,,treated as an async iterable we can then await every request from the server and
Dialogue: 1,0:01:48.09,0:01:51.30,720CN,,0,0,0,,然后做出响应，这是服务器端的绝佳起点
Dialogue: 2,0:01:48.09,0:01:51.30,720EN,,0,0,0,,respond to it accordingly and that's an awesome starting point for a server-side JavaScript app now
Dialogue: 1,0:01:51.50,0:01:55.75,720CN,,0,0,0,,Deno刚刚发布了1.0版本，所以如果你开始
Dialogue: 2,0:01:51.50,0:01:55.75,720EN,,0,0,0,,Deno 1.0 just hit release candidate 1 so if you start
Dialogue: 1,0:01:55.95,0:01:58.35,720CN,,0,0,0,,如果现在开始使用，就算早期用户
Dialogue: 2,0:01:55.95,0:01:58.35,720EN,,0,0,0,,using it today consider yourself an early adopter do
Dialogue: 1,0:01:58.56,0:02:01.73,720CN,,0,0,0,,你认为Deno是服务器端JavaScript的未来吗 写下评论
Dialogue: 2,0:01:58.56,0:02:01.73,720EN,,0,0,0,,you think Deno is the future of server-side JavaScript?  the comments below
Dialogue: 1,0:02:02.10,0:02:06.65,720CN,,0,0,0,,感谢你的观看 别忘了点赞 下集再见
Dialogue: 2,0:02:02.10,0:02:06.65,720EN,,0,0,0,,thanks for watching hit the like button and I will see you in next one
